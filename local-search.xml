<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>QWebEngineView C++和js交互</title>
    <link href="/noob/2021/10/30/QWebEngineView-C%E5%92%8Cjs%E4%BA%A4%E4%BA%92/"/>
    <url>/noob/2021/10/30/QWebEngineView-C%E5%92%8Cjs%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<blockquote><p>QWebEngine，QWebChannel简单使用。</p></blockquote><span id="more"></span><h2 id="0-QWebEngine"><a href="#0-QWebEngine" class="headerlink" title="0. QWebEngine"></a>0. QWebEngine</h2><p><code>pro</code>文件中添加</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">QT       +</span>=<span class="hljs-string">  webenginewidgets</span><br></code></pre></td></tr></table></figure><p><code>.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QWebEngineView&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QUrl&gt;</span></span><br><br>Widget::Widget(QWidget *parent)<br>    : QWidget(parent)<br>&#123;<br>    QWebEngineView* view = <span class="hljs-keyword">new</span> QWebEngineView(<span class="hljs-keyword">this</span>);<br>    view-&gt;load(QUrl::fromLocalFile(qApp-&gt;applicationDirPath() + <span class="hljs-string">&quot;/2.html&quot;</span>));<br>    view-&gt;show();<br><br>    QVBoxLayout* layout = <span class="hljs-keyword">new</span> QVBoxLayout;<br>    layout-&gt;setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    layout-&gt;addWidget(view);<br><br>    <span class="hljs-keyword">this</span>-&gt;setLayout(layout);<br>    <span class="hljs-keyword">this</span>-&gt;setFixedSize(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要在<code>exe</code>的路径下放入<code>html和js文件</code>以及<code>Qt</code>的<code>qwebchannel.js</code></p><h2 id="1-js调用C"><a href="#1-js调用C" class="headerlink" title="1.js调用C++"></a>1.js调用C++</h2><p><code>pro</code>文件中添加</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">QT       +</span>=<span class="hljs-string"> webenginewidgets webchannel</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebClass</span> :</span> <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">WebClass</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br><br>signals:<br><br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">jscallme</span><span class="hljs-params">(<span class="hljs-keyword">const</span> QString &amp;text)</span></span><br><span class="hljs-function">    </span>&#123;<br>        QMessageBox::information(<span class="hljs-literal">nullptr</span>, <span class="hljs-string">&quot;jscallme&quot;</span>, text);<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++">MainWindow::MainWindow(QWidget *parent)<br>    : QMainWindow(parent)<br>&#123;<br>    webView = <span class="hljs-keyword">new</span> QWebEngineView(<span class="hljs-keyword">this</span>);<br>    webView-&gt;load(QUrl::fromLocalFile(qApp-&gt;applicationDirPath() + <span class="hljs-string">&quot;/2.html&quot;</span>));<br><br>    webChannel = <span class="hljs-keyword">new</span> QWebChannel(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">auto</span> webobj = <span class="hljs-keyword">new</span> WebClass(<span class="hljs-keyword">this</span>);<br>    webChannel-&gt;registerObject(<span class="hljs-string">&quot;webobj&quot;</span>, webobj);<br>    webView-&gt;page()-&gt;setWebChannel(webChannel);<br><br>    QVBoxLayout* layout = <span class="hljs-keyword">new</span> QVBoxLayout;<br>    layout-&gt;setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    layout-&gt;addWidget(webView);<br><br>    QFrame* centerFrame = <span class="hljs-keyword">new</span> QFrame(<span class="hljs-keyword">this</span>);<br>    centerFrame-&gt;setLayout(layout);<br>    <span class="hljs-keyword">this</span>-&gt;setCentralWidget(centerFrame);<br>    <span class="hljs-keyword">this</span>-&gt;showMaximized();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;qwebchannel.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">new</span> QWebChannel(qt.webChannelTransport,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">channel</span>)</span>&#123;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> webobj = channel.objects.webobj;</span><br><span class="javascript">  <span class="hljs-built_in">window</span>.foo = webobj;</span><br><span class="javascript">  webobj.jscallme(<span class="hljs-string">&#x27;中文调用&#x27;</span>);;</span><br>  &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-c-调用js"><a href="#2-c-调用js" class="headerlink" title="2.c++调用js"></a>2.c++调用js</h2><p><strong>直接调用</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++">MainWindow::MainWindow(QWidget *parent)<br>    : QMainWindow(parent)<br>&#123;<br>    webView = <span class="hljs-keyword">new</span> QWebEngineView(<span class="hljs-keyword">this</span>);<br>    webView-&gt;load(QUrl::fromLocalFile(qApp-&gt;applicationDirPath() + <span class="hljs-string">&quot;/2.html&quot;</span>));<br><br>    webChannel = <span class="hljs-keyword">new</span> QWebChannel(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">auto</span> webobj = <span class="hljs-keyword">new</span> WebClass(<span class="hljs-keyword">this</span>);<br>    webChannel-&gt;registerObject(<span class="hljs-string">&quot;webobj&quot;</span>, webobj);<br>    webView-&gt;page()-&gt;setWebChannel(webChannel);<br><br>    QPushButton* button = <span class="hljs-keyword">new</span> QPushButton(<span class="hljs-string">&quot;click me&quot;</span>,<span class="hljs-keyword">this</span>);<br><br>    QVBoxLayout* layout = <span class="hljs-keyword">new</span> QVBoxLayout;<br>    layout-&gt;setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    layout-&gt;addWidget(button);<br>    layout-&gt;addWidget(webView);<br><br>    QFrame* centerFrame = <span class="hljs-keyword">new</span> QFrame(<span class="hljs-keyword">this</span>);<br>    centerFrame-&gt;setLayout(layout);<br>    <span class="hljs-keyword">this</span>-&gt;setCentralWidget(centerFrame);<br>    <span class="hljs-keyword">this</span>-&gt;showMaximized();<br><br>    connect(button, &amp;QPushButton::clicked, [=]()&#123;<br>        webView-&gt;page()-&gt;runJavaScript(<span class="hljs-string">&quot;cppCallJs();&quot;</span>,<br>                                       [<span class="hljs-keyword">this</span>](<span class="hljs-keyword">const</span> QVariant &amp;v) &#123;<br>            qDebug()&lt;&lt;v.toString();<br>        &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;qwebchannel.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> cppCallJs=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span></span><br>      &#123;<br><span class="javascript">         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cppCassJs down!&quot;</span>;</span><br>      &#125;<br><br><span class="javascript">      <span class="hljs-keyword">new</span> QWebChannel(qt.webChannelTransport,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">channel</span>)</span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> webobj = channel.objects.webobj;</span><br><span class="javascript">      <span class="hljs-built_in">window</span>.foo = webobj;</span><br>      &#125;);<br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>信号</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebClass</span> :</span> <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">WebClass</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(QString _content)</span></span>&#123;<span class="hljs-function">emit <span class="hljs-title">contentChanged</span><span class="hljs-params">(_content)</span></span>;&#125;;<br><br>signals:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contentChanged</span><span class="hljs-params">(QString)</span></span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">connect(button, &amp;QPushButton::clicked, [=]()&#123;<br>    webobj-&gt;setContent(<span class="hljs-string">&quot;11111&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;qwebchannel.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><br><span class="javascript">      <span class="hljs-keyword">var</span> updateattribute=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">text</span>)</span></span><br>      &#123;<br><span class="javascript">        <span class="hljs-built_in">document</span>.write(text);</span><br>      &#125;<br><br><span class="javascript">      <span class="hljs-keyword">new</span> QWebChannel(qt.webChannelTransport,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">channel</span>)</span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> webobj = channel.objects.webobj;</span><br><span class="javascript">      <span class="hljs-built_in">window</span>.foo = webobj;</span><br>      webobj.contentChanged.connect(updateattribute);<br><br>      &#125;);<br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>属性-信号</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebClass</span> :</span> <span class="hljs-keyword">public</span> QObject<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">WebClass</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br>    Q_PROPERTY(QString content MEMBER content_ NOTIFY contentChanged)<br><br>signals:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contentChanged</span><span class="hljs-params">(QString)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    QString content_;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">connect(button, &amp;QPushButton::clicked, [=]()&#123;<br>   webobj-&gt;setProperty(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;222222&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://myprogrammingnotes.com/communication-c-javascript-qt-webengine.html"></a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/sunnyloves/article/details/88683090"></a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QWebEngine</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QWebEngine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyQt5 加载UI文件</title>
    <link href="/noob/2021/10/29/PyQt5-%E5%8A%A0%E8%BD%BDUI%E6%96%87%E4%BB%B6/"/>
    <url>/noob/2021/10/29/PyQt5-%E5%8A%A0%E8%BD%BDUI%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p> PyQt5直接加载UI文件，而不是将其转化为.py文件。</p></blockquote><span id="more"></span><h2 id="PySide2直接加载UI文件"><a href="#PySide2直接加载UI文件" class="headerlink" title="PySide2直接加载UI文件"></a>PySide2直接加载UI文件</h2><p>通过Qt Creator新建Qt for Python项目</p><p><img src="image-20211029095545433.png"></p><p>自动生成直接加载UI文件代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># This Python file uses the following encoding: utf-8</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> PySide2.QtWidgets <span class="hljs-keyword">import</span> QApplication, QWidget<br><span class="hljs-keyword">from</span> PySide2.QtCore <span class="hljs-keyword">import</span> QFile<br><span class="hljs-keyword">from</span> PySide2.QtUiTools <span class="hljs-keyword">import</span> QUiLoader<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UITest</span>(<span class="hljs-params">QWidget</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(UITest, self).__init__()<br>        self.load_ui()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_ui</span>(<span class="hljs-params">self</span>):</span><br>        loader = QUiLoader()<br>        path = os.fspath(Path(__file__).resolve().parent / <span class="hljs-string">&quot;form.ui&quot;</span>)<br>        ui_file = QFile(path)<br>        ui_file.<span class="hljs-built_in">open</span>(QFile.ReadOnly)<br>        loader.load(ui_file, self)<br>        ui_file.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = QApplication([])<br>    widget = UITest()<br>    widget.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><h2 id="PyQt5直接加载UI文件"><a href="#PyQt5直接加载UI文件" class="headerlink" title="PyQt5直接加载UI文件"></a>PyQt5直接加载UI文件</h2><p>仿造上述代码</p><pre><code class="python"># This Python file uses the following encoding: utf-8import sysfrom PyQt5.QtWidgets import QApplication, QWidgetfrom PyQt5.uic import loadUiclass UITest(QWidget):    def __init__(self, parent=None):        super().__init__()        loadUi(&#39;form.ui&#39;, self)        self.setFixedSize(600, 400)        self.pushButton.clicked.connect(self.onButtonClicked)#可直接self.pushButton,该QPushButton变量在UI中定义    def onButtonClicked(self):        x = random.randint(self.pushButton.width(), self.width() - self.pushButton.width())        y = random.randint(self.pushButton.height(), self.height() - self.pushButton.height())        self.pushButton.move(x, y)if __name__ == &quot;__main__&quot;:    app = QApplication([])    widget = UITest()    widget.show()    sys.exit(app.exec_())</code></pre>]]></content>
    
    
    <categories>
      
      <category>PyQt</category>
      
      <category>QWidget</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QWidget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QListWidget</title>
    <link href="/noob/2021/10/28/QListWidget/"/>
    <url>/noob/2021/10/28/QListWidget/</url>
    
    <content type="html"><![CDATA[<blockquote><p>QListWidget记录汇总。</p></blockquote><span id="more"></span><h2 id="1-QListWidget-itemChanged-QListWidgetItem-item"><a href="#1-QListWidget-itemChanged-QListWidgetItem-item" class="headerlink" title="1. QListWidget::itemChanged(QListWidgetItem * _item)"></a>1. QListWidget::itemChanged(QListWidgetItem * _item)</h2><ol><li><p>当允许编辑时，编辑后失去焦点可触发该信号，假设槽函数为<code>onItemChanged</code>，如果此时选中其他行，此时的<code>currentRow()</code>不是被编辑的<code>row</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Test::onItemChanged</span><span class="hljs-params">(QListWidgetItem * _item)</span> <span class="hljs-comment">//</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> row = listWidget-&gt;currentRow();<span class="hljs-comment">//错</span><br>    <span class="hljs-keyword">auto</span> row2 = listWidget-&gt;row(_item);<span class="hljs-comment">//对</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-增加行"><a href="#2-增加行" class="headerlink" title="2. 增加行"></a>2. 增加行</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> listWidgetItem = <span class="hljs-keyword">new</span> QListWidgetItem(<span class="hljs-string">&quot;test&quot;</span>, listWidget);<br></code></pre></td></tr></table></figure><p>可编辑、可选中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">listWidgetItem-&gt;setFlags(Qt::ItemIsEnabled | Qt::ItemIsEditable | Qt::ItemIsSelectable);<br></code></pre></td></tr></table></figure><p>增加一行会触发<code>QListWidget::itemChanged(QListWidgetItem * _item)</code>信号，不想触发可以关闭</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">disconnect(listWidget, &amp;QListWidget::itemChanged, <span class="hljs-keyword">this</span>, &amp;Test::onItemChanged);<br><span class="hljs-keyword">auto</span> listWidgetItem = <span class="hljs-keyword">new</span> QListWidgetItem(<span class="hljs-string">&quot;test&quot;</span>, listWidget);<br>listWidgetItem-&gt;setFlags(Qt::ItemIsEnabled | Qt::ItemIsEditable | Qt::ItemIsSelectable);<br>connect(listWidget, &amp;QListWidget::itemChanged, <span class="hljs-keyword">this</span>, &amp;Test::onItemChanged);<br></code></pre></td></tr></table></figure><h2 id="3-删除行"><a href="#3-删除行" class="headerlink" title="3. 删除行"></a>3. 删除行</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> item = listWidget-&gt;takeItem(index);<br><span class="hljs-keyword">delete</span> item;<br></code></pre></td></tr></table></figure><h2 id="4-去掉item选中的虚线框"><a href="#4-去掉item选中的虚线框" class="headerlink" title="4. 去掉item选中的虚线框"></a>4. 去掉item选中的虚线框</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">listWidget-&gt;setFocusPolicy(Qt::NoFocus);<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">QListWidget</span>&#123;<br>    <span class="hljs-attribute">outline</span>:<span class="hljs-number">0px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-item颜色交替"><a href="#5-item颜色交替" class="headerlink" title="5. item颜色交替"></a>5. item颜色交替</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">listWidget-&gt;setAlternatingRowColors(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">QListWidget</span> &#123;<br><span class="hljs-attribute">background</span>:gray;<br>    <span class="hljs-attribute">alternate-background-color</span>: black;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20211028133540429.png"></p><p>算上背景色有两种颜色</p><p>或</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">QListWidget</span> &#123;<br><span class="hljs-attribute">background</span>:gray;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span><span class="hljs-selector-pseudo">::item</span><span class="hljs-selector-pseudo">:alternate</span> <span class="hljs-comment">/*偶数行*/</span><br>&#123;<br><span class="hljs-attribute">background</span>:pink;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span><span class="hljs-selector-pseudo">::item</span>:!<span class="hljs-selector-tag">alternate</span> <span class="hljs-comment">/*奇数行*/</span><br>&#123;<br><span class="hljs-attribute">background</span>:black;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20211028134455905.png"></p><p>算上背景色有三种颜色</p><h2 id="6-编辑框"><a href="#6-编辑框" class="headerlink" title="6. 编辑框"></a>6. 编辑框</h2><p>同QLineEdit</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">QListWidget</span> <span class="hljs-selector-tag">QLineEdit</span><br>&#123;<br>    <span class="hljs-attribute">background</span>: gray;<br><span class="hljs-attribute">color</span>:white;<br><span class="hljs-attribute">border</span>:none;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-部分样式"><a href="#7-部分样式" class="headerlink" title="7. 部分样式"></a>7. 部分样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">QListWidget</span> &#123;<br><span class="hljs-attribute">border</span>: none;<br><span class="hljs-attribute">background</span>:gray;<br>    <span class="hljs-comment">/*alternate-background-color: black;*/</span><br><span class="hljs-attribute">color</span>: green;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span>&#123;<br>    <span class="hljs-attribute">outline</span>:<span class="hljs-number">0px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span> <span class="hljs-selector-tag">QLineEdit</span><br>&#123;<br>    <span class="hljs-attribute">background</span>: gray;<br><span class="hljs-attribute">color</span>:white;<br><span class="hljs-attribute">border</span>:none;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span><span class="hljs-selector-pseudo">::item</span><span class="hljs-selector-pseudo">:alternate</span><br>&#123;<br><span class="hljs-attribute">background</span>:pink;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span><span class="hljs-selector-pseudo">::item</span>:!<span class="hljs-selector-tag">alternate</span><br>&#123;<br><span class="hljs-attribute">background</span>:black;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span><span class="hljs-selector-pseudo">::item</span>&#123;<br><span class="hljs-attribute">color</span>: yellow;<br><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid blue;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span><span class="hljs-selector-pseudo">::item</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background</span>: red;<br><span class="hljs-attribute">color</span>: white;<br>&#125;<br><br><span class="hljs-selector-tag">QListWidget</span><span class="hljs-selector-pseudo">::item</span><span class="hljs-selector-pseudo">:selected</span> &#123;<br>    <span class="hljs-attribute">background</span>: red;<br><span class="hljs-attribute">color</span>:white;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="image-20211028135145129.png"></p>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QWidget</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QWidget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防止同一信号多次触发-使用QObject::disconnect()函数</title>
    <link href="/noob/2021/09/10/%E9%98%B2%E6%AD%A2%E5%90%8C%E4%B8%80%E4%BF%A1%E5%8F%B7%E5%A4%9A%E6%AC%A1%E8%A7%A6%E5%8F%91-%E4%BD%BF%E7%94%A8QObject-disconnect-%E5%87%BD%E6%95%B0/"/>
    <url>/noob/2021/09/10/%E9%98%B2%E6%AD%A2%E5%90%8C%E4%B8%80%E4%BF%A1%E5%8F%B7%E5%A4%9A%E6%AC%A1%E8%A7%A6%E5%8F%91-%E4%BD%BF%E7%94%A8QObject-disconnect-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令</title>
    <link href="/noob/2021/09/06/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/noob/2021/09/06/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>整理中</p></blockquote><span id="more"></span><h2 id="修改-gitignore-文件，如何重新生效"><a href="#修改-gitignore-文件，如何重新生效" class="headerlink" title="修改 .gitignore 文件，如何重新生效"></a>修改 .gitignore 文件，如何重新生效</h2><blockquote><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的;</p></blockquote><p><strong>命令</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git rm -r <span class="hljs-comment">--cached .</span><br>git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">&#x27;update .gitignore&#x27;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/bymingliang/p/12273742.html">修改 .gitignore 文件，如何重新生效 - 一叶千秋 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器删除元素的方法（备份csdn博客，防止删除）</title>
    <link href="/noob/2021/09/01/%E5%AE%B9%E5%99%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E5%A4%87%E4%BB%BDcsdn%E5%8D%9A%E5%AE%A2%EF%BC%8C%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%EF%BC%89/"/>
    <url>/noob/2021/09/01/%E5%AE%B9%E5%99%A8%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E5%A4%87%E4%BB%BDcsdn%E5%8D%9A%E5%AE%A2%EF%BC%8C%E9%98%B2%E6%AD%A2%E5%88%A0%E9%99%A4%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Effective STL 第一章 第9条<br>1、要删除容器中有特定值的所有对象;</p><p>2、要删除容器中满足特定判断式（条件）的所有对象;</p><p>3、要在循环内部做某些（除了删除对象之外的）操作。</p><p>完全复制粘贴自<a href="https://blog.csdn.net/xlf13872135090/article/details/18040955%EF%BC%8C%E8%AF%A5%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93%E8%87%B3%E3%80%8AEffective">https://blog.csdn.net/xlf13872135090/article/details/18040955，该博客总结至《Effective</a> STL 第一章 第9条》，本文主要作用为备份，防止突然找不到。</p><span id="more"></span></blockquote><p>先写总结，在写例子：</p><p>1、要删除容器中有特定值的所有对象：</p><p>如果容器是vector, string或deque，则使用erase-remove习惯用法</p><p>如果容器是list，则使用list::remove</p><p>如果容器是一个标准关联容器，则使用它的erase成员函数</p><p>2、要删除容器中满足特定判断式（条件）的所有对象：</p><p>如果容器是vector、string和deque，则使用erase-remove-if用法</p><p>如果容器是list, 则使用list::remove_if</p><p>如果容器是一个标准关联容器，则使用remove_copy_if和swap，或者写一个循环来遍历容器中的元素，当把迭代器传给erase时，要对它进行后缀递增。</p><p>3、要在循环内部做某些（除了删除对象之外的）操作：</p><p>如果容器是一个标准序列容器，则写一个循环来遍历容器中的元素，每次调用erase时，要用它的返回值更新迭代器</p><p>如果容器是一个标准关联容器，则写一个循环来遍历容器中的元素，每次迭代器传给erase时，要对它进行后缀递增</p><p>以下是例子:</p><p>假定一个容器c，包含int类型，Container<int> c;</p><h2 id="问题1：当要删除c中所有值为1963的元素"><a href="#问题1：当要删除c中所有值为1963的元素" class="headerlink" title="问题1：当要删除c中所有值为1963的元素"></a>问题1：当要删除c中所有值为1963的元素</h2><p>（1）如果是一个连续内存容器(vectordeque string),使用erase-remove方法</p><p>remove操作并没有移除元素，而是将后面的元素覆盖删除元素，</p><p>返回新区间的逻辑终点，即下一个没有被删除的位置</p><p>（注意这里会使原来及其后面的迭代器失效，因为指向了不正确的元素）</p><p>erase删除两个迭代器之间的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">c.erase(remove(c.begin(), c.end(), <span class="hljs-number">1963</span>),c.end());<br></code></pre></td></tr></table></figure><p>（2）对于list，这一办法同样适用，但是适用list成员函数remove更高效</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">c.remove(<span class="hljs-number">1963</span>);<br></code></pre></td></tr></table></figure><p>（3）当c是标准关联容器（set multiset map multimap）时，不能使用remove操作，</p><p>因为没有这个成员函数，使用remove算法可能会覆盖容器的值，同时可能会破坏容器</p><p>正确方法是 调用erase</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">c.erase(<span class="hljs-number">1963</span>);    <span class="hljs-comment">//只需要对数时间开销，序列容器需要线性时间</span><br></code></pre></td></tr></table></figure><h2 id="问题2：如果是使下面判断式返回true的每一个对象"><a href="#问题2：如果是使下面判断式返回true的每一个对象" class="headerlink" title="问题2：如果是使下面判断式返回true的每一个对象"></a>问题2：如果是使下面判断式返回true的每一个对象</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">badValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>;  <span class="hljs-comment">//返回x是否是“坏值”</span><br></code></pre></td></tr></table></figure><p>(1) 对于序列容器（vectorstring deque list）,对remove的调用换成remove_if就可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">c.erase(remove_if(c.begin(), c.end(),badValue), c.end());<br><br><span class="hljs-built_in">list</span>：c.remove_if(badValue)<br></code></pre></td></tr></table></figure><p>（2）对于标准关联容器，解决方案有两种：</p><p>第一种：利用remove_copy_if把我们需要复制的值复制到一个新容器中，然后把原来容器的内容和新容器的内容相互交换：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">AssocContainer&lt;<span class="hljs-keyword">int</span>&gt; c;          <span class="hljs-comment">//c是标准关联容器</span><br><br>…<br><br>AssocContainer&lt;<span class="hljs-keyword">int</span>&gt; goodValue;  <span class="hljs-comment">//保存不被删除的值的临时容器</span><br><br>remove_copy_if(c.begin(), c.end(),  <span class="hljs-comment">//把不被删除的值从c复制到goodValues中</span><br><br>inserter(goodValues,goodValues.end()), badValue);<br><br>c.swap(goodValue);       <span class="hljs-comment">//交换c和goodValues的值</span><br></code></pre></td></tr></table></figure><p>缺点是：需要复制所有不被删除的元素</p><p>不能直接从原始的容器中删除元素，因为容器没有提供类似remove_if的成员函数。</p><p>第二种：可以写一个循环，在遍历过程中删除元素。</p><p>一个直截了当的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(AssocContainer&lt;<span class="hljs-keyword">int</span>&gt;::iterator i =c.begin(); i != c.end(); ++i )<br><br>   <span class="hljs-keyword">if</span>(badValue(*i))<br>       c.erase(i); <br></code></pre></td></tr></table></figure><p>但是这样会导致不确定的行为，当容器中的一个元素被删除时，指向该元素的所有迭代器都变得无效，c.erase(i)之后，i变为无效值。</p><p>为了避免这个问题，要确保在调用erase之前，有一个迭代器指向c中的下一个元素。</p><p>最简单的方法是，对i使用后缀++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(AssocContainer&lt;<span class="hljs-keyword">int</span>&gt;::iterator i =c.begin(); i != c.end(); (什么都不做) )<br>   <span class="hljs-keyword">if</span>(badValue(*i))<br>      c.erase(i++);      <span class="hljs-comment">//这样在执行erase之前已经对i递增为新的值，旧的值删除变为了无效值，但i已经成为新值</span><br>  <span class="hljs-keyword">else</span><br>      ++i;<br></code></pre></td></tr></table></figure><p>问题3：如果我们不仅要删除使badValue返回true的元素，还当元素被删除时向日志文件记录一条信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">ofstream logFile;<br><br><span class="hljs-keyword">for</span>(AssocContainer&lt;<span class="hljs-keyword">int</span>&gt;::iterator i =c.begin(); i != c.end(); (什么都不做) )<br>   <span class="hljs-keyword">if</span>(badValue(*i)) &#123;<br>     logFile &lt;&lt; “Eraseing” &lt;&lt; *i &lt;&lt; ‘\n’;  <span class="hljs-comment">//写日志文件</span><br>      c.erase(i++);        <span class="hljs-comment">//关联容器对erase的返回值是void</span><br>      &#125; <br>  <span class="hljs-keyword">else</span><br>       ++i;<br></code></pre></td></tr></table></figure><p>这种方法对vector string  deque无效，会导致不确定行为，因为这种容器调用erase不仅会使指向被删除元素的迭代器无效，也会使被删除元素之后的所有迭代器失效（因为容器位置变了，原来指向的内容已经变了）,++i，–i都会无效。</p><p>所以对于vector string  deque，利用erase的返回值。返回值是我们所需要的，一旦erase完成，它是指向紧随被删除元素的下一个元素的有效迭代器。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(SeqContainer&lt;<span class="hljs-keyword">int</span>&gt;::iterator i =c.begin(); i != c.end(); (什么都不做) )<br>   <span class="hljs-keyword">if</span>(badValue(*i)) <br>   &#123;<br>      logFile &lt;&lt; “Eraseing” &lt;&lt; *i &lt;&lt; ‘\n’;  <span class="hljs-comment">//写日志文件</span><br>      i =c.erase(i); <br>   &#125;     <br>  <span class="hljs-keyword">else</span><br>      ++i;<br></code></pre></td></tr></table></figure><p>对于list来说，一般是对list采用和vector string deque相同的方式。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能指针指定Deleter</title>
    <link href="/noob/2021/08/31/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E6%8C%87%E5%AE%9ADeleter/"/>
    <url>/noob/2021/08/31/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E6%8C%87%E5%AE%9ADeleter/</url>
    
    <content type="html"><![CDATA[<blockquote><p>unique_ptr、shared_ptr及其数组，通过lambda实现指定Deleter</p></blockquote><span id="more"></span><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">unique_ptr</span>&lt;Test, <span class="hljs-built_in">std</span>::function&lt;<span class="hljs-keyword">void</span>(Test *)&gt;&gt; test(<span class="hljs-keyword">new</span> Test, [](Test* _pointer) &#123;<br>    <span class="hljs-comment">//其他操作</span><br>    <span class="hljs-keyword">delete</span> _pointer;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">unique_ptr</span>&lt;Test, <span class="hljs-built_in">std</span>::function&lt;<span class="hljs-keyword">void</span>(Test *)&gt;&gt;(<span class="hljs-keyword">new</span> Test[<span class="hljs-number">5</span>], <span class="hljs-built_in">std</span>::default_delete&lt;Test[]&gt;());<br></code></pre></td></tr></table></figure><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">shared_ptr</span>&lt;Test&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Test, [](Test* _pointer) &#123;</span></span><br><span class="hljs-function"><span class="hljs-params">     <span class="hljs-comment">//其他操作</span></span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">delete</span> _pointer;</span></span><br><span class="hljs-function"><span class="hljs-params">&#125;)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">shared_ptr</span>&lt;Test&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Test[<span class="hljs-number">5</span>], <span class="hljs-built_in">std</span>::default_delete&lt;Test[]&gt;())</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>C++11</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt处理耗时任务，防止界面假死的两个简单写法</title>
    <link href="/noob/2021/08/06/Qt%E5%A4%84%E7%90%86%E8%80%97%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%8C%E9%98%B2%E6%AD%A2%E7%95%8C%E9%9D%A2%E5%81%87%E6%AD%BB%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%AE%80%E5%8D%95%E5%86%99%E6%B3%95/"/>
    <url>/noob/2021/08/06/Qt%E5%A4%84%E7%90%86%E8%80%97%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%8C%E9%98%B2%E6%AD%A2%E7%95%8C%E9%9D%A2%E5%81%87%E6%AD%BB%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%AE%80%E5%8D%95%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>借助<code>QtConcurrent</code>和<code>QApplication::processEvents()</code>简化处理耗时任务以防界面假死。</p></blockquote><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有如下需求</p><p>点击<code>开始</code>按钮后，执行耗时操作，该按钮<code>进行中</code>后的<code>.</code>的数量随时间变化</p><p><img src="start.png" alt="start"></p><p><img src="doing.png" alt="doing"></p><p>代码如下</p><p><code>mainwindow.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> MAINWINDOW_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAINWINDOW_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QMainWindow&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QCloseEvent&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> Ui &#123;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainWindow</span>;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainWindow</span> :</span> <span class="hljs-keyword">public</span> QMainWindow<br>&#123;<br>    Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MainWindow</span><span class="hljs-params">(QWidget *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br>    ~MainWindow();<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSomeThing0</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toDoOneThing</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _index)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    Ui::MainWindow *ui;<br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;QString&gt; DOT_VECTOR =<br>&#123;<br><span class="hljs-string">&quot;.&quot;</span>,<br><span class="hljs-string">&quot;..&quot;</span>,<br><span class="hljs-string">&quot;...&quot;</span>,<br><span class="hljs-string">&quot;....&quot;</span>,<br><span class="hljs-string">&quot;.....&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SLEEP_TIME = <span class="hljs-number">20</span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// MAINWINDOW_H</span></span><br></code></pre></td></tr></table></figure><p><code>mainwindow.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ui_mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtConcurrent&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QThread&gt;</span></span><br><br>MainWindow::MainWindow(QWidget *parent) :<br>    QMainWindow(parent),<br>    ui(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;setupUi(<span class="hljs-keyword">this</span>);<br>connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]() &#123;<br>ui-&gt;pushButton-&gt;setEnabled(<span class="hljs-literal">false</span>);<br><br>doSomeThing0();<br><br>ui-&gt;pushButton-&gt;setText(<span class="hljs-string">u8&quot;开始&quot;</span>);<br>ui-&gt;pushButton-&gt;setEnabled(<span class="hljs-literal">true</span>);<br>&#125;);<br>&#125;<br><br>MainWindow::~MainWindow()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::doSomeThing0</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>&#123;<br>toDoOneThing(i);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::toDoOneThing</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _index)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//变化按钮文字后面&quot;.&quot;的个数</span><br>QString buttonText = <span class="hljs-string">u8&quot;进行中&quot;</span>;<br>buttonText += DOT_VECTOR[_index / <span class="hljs-number">20</span> % DOT_VECTOR.size()];<br>ui-&gt;pushButton-&gt;setText(buttonText);<br><br><span class="hljs-comment">//模拟耗时操作</span><br>QThread::msleep(SLEEP_TIME);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上代码运行后点击<code>开始</code>，界面假死。</p><p>很多情况下，我们要在界面种处理某些耗时的操作，如果直接调用的话，主界面就会卡死，一般来说通过多线程可以解决该问题，包括最传统的<code>run</code>()和新式的<code>QObject::moveToThread()</code>具体可参考该文章<a href="https://zhuanlan.zhihu.com/p/53270619">Qt 多线程编程之敲开 QThread 类的大门 - 知乎 (zhihu.com)</a></p><p>有时候耗时操作逻辑很简单，代码也没有几行，单独封装一个类有点麻烦，有没有更省事的方法呢？</p><h2 id="单线程方式"><a href="#单线程方式" class="headerlink" title="单线程方式"></a>单线程方式</h2><p>可以单线程借助<code>QApplication::processEvents()</code>实现以上需求：</p><p><code>mainwindow.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">private</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSomeThing0</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSomeThing1</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//新增</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toDoOneThing</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _index)</span></span>;<br><br></code></pre></td></tr></table></figure><p><code>mainwindow.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ui_mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtConcurrent&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QThread&gt;</span></span><br><br>MainWindow::MainWindow(QWidget *parent) :<br>    QMainWindow(parent),<br>    ui(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;setupUi(<span class="hljs-keyword">this</span>);<br>connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]() &#123;<br>ui-&gt;pushButton-&gt;setEnabled(<span class="hljs-literal">false</span>);<br><br>doSomeThing1(); <span class="hljs-comment">//调用doSomeThing1()</span><br><br>ui-&gt;pushButton-&gt;setText(<span class="hljs-string">u8&quot;开始&quot;</span>);<br>ui-&gt;pushButton-&gt;setEnabled(<span class="hljs-literal">true</span>);<br>&#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::doSomeThing0</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>&#123;<br>toDoOneThing(i);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::doSomeThing1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>&#123;<br>toDoOneThing(i);<br>QApplication::processEvents(); <span class="hljs-comment">//新增</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看出<code>doSomeThing1()</code>比<code>doSomeThing0()</code>只多一行代码。</p><h2 id="多线程方式"><a href="#多线程方式" class="headerlink" title="多线程方式"></a>多线程方式</h2><p>这里使用<code>QtConcurrent::run()</code>函数，实现起来相当简洁：</p><p><code>.pro</code></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">QT +</span>=<span class="hljs-string"> concurrent</span><br></code></pre></td></tr></table></figure><p><code>mainwindow.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">private</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSomeThing0</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSomeThing2</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//新增</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toDoOneThing</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _index)</span></span>;<br><br></code></pre></td></tr></table></figure><p><code>mainwindow.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ui_mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtConcurrent&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QThread&gt;</span></span><br><br>MainWindow::MainWindow(QWidget *parent) :<br>    QMainWindow(parent),<br>    ui(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;setupUi(<span class="hljs-keyword">this</span>);<br>connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]() &#123;<br>ui-&gt;pushButton-&gt;setEnabled(<span class="hljs-literal">false</span>);<br><br>doSomeThing2(); <span class="hljs-comment">//调用doSomeThing2()</span><br><br>ui-&gt;pushButton-&gt;setText(<span class="hljs-string">u8&quot;开始&quot;</span>);<br>ui-&gt;pushButton-&gt;setEnabled(<span class="hljs-literal">true</span>);<br>&#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::doSomeThing0</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>&#123;<br>toDoOneThing(i);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::doSomeThing2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> <span class="hljs-built_in">future</span> = QtConcurrent::run(<span class="hljs-keyword">this</span>, &amp;MainWindow::doSomeThing0);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">future</span>.isFinished() == <span class="hljs-literal">false</span>)<br>&#123;<br>QApplication::processEvents();<br>QThread::msleep(<span class="hljs-number">20</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Concurrent是并发的意思，QtConcurrent是一个命名空间，提供了一些高级的 API，使得在编写多线程的时候，无需使用低级线程原语，如读写锁，等待条件或信号。使用QtConcurrent编写的程序会根据可用的处理器内核数自动调整使用的线程数。<a href="https://blog.csdn.net/luoyayun361/article/details/80288610">Qt QtConcurrent之 Run 函数用法_luoyayun361的专栏-CSDN博客_qtconcurrent</a></p><p><code>QtConcurrent::run()</code>从第三个参数开始为所调用函数的参数。</p><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><p>以上代码执行时会出现点击关闭按钮无法退出的问题，解决方法如下：</p><p><code>mainwindow.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">protected</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">closeEvent</span><span class="hljs-params">(QCloseEvent *event)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">bool</span> isFinished_ = <span class="hljs-literal">false</span>;<br><br></code></pre></td></tr></table></figure><p><code>mainwindow.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::closeEvent</span><span class="hljs-params">(QCloseEvent * event)</span></span><br><span class="hljs-function"></span>&#123;<br>isFinished_ = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> QMainWindow::closeEvent(event);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::doSomeThing0</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (isFinished_ == <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">break</span>;<br>toDoOneThing(i);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::doSomeThing1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (isFinished_ == <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">break</span>;<br>toDoOneThing(i);<br><br>QApplication::processEvents();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="示例代码路径"><a href="#示例代码路径" class="headerlink" title="示例代码路径"></a>示例代码路径</h2><p><a href="https://gitee.com/yuque/demo/tree/master/Backgrounder">Backgrounder · yuque/demo - 码云 - 开源中国 (gitee.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda表达式值捕获的一点小疑问</title>
    <link href="/noob/2021/06/03/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%80%BC%E6%8D%95%E8%8E%B7%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E7%96%91%E9%97%AE/"/>
    <url>/noob/2021/06/03/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%80%BC%E6%8D%95%E8%8E%B7%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E7%96%91%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<blockquote></blockquote><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>学习C++时，版本是<code>C++03</code>，公司也没有升级编译器，一直没有学习<code>C++11</code>，后来换工作后，新公司提倡使用<code>C++11</code>，特别推荐槽函数直接使用<code>lambda</code>如下所示写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]() &#123;<br>&#125;);<br></code></pre></td></tr></table></figure><p>大佬推荐<code>[]</code>中，一般直接捕获<code>=</code>即可。</p><p>后来大体了解了一下捕获：</p><blockquote><p><code>[&amp;]</code>（以引用隐式捕获被使用的自动变量）</p><p><code>[=] </code>（以复制隐式捕获被使用的自动变量）。</p><p><code>[=, &amp;i]</code>     // 以复制捕获，但 i 以引用捕获</p></blockquote><p>但是有点疑问：</p><p><code>dialog.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> :</span> <span class="hljs-keyword">public</span> QDialog<br>&#123;<br>    Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br>    Dialog(QWidget *parent = <span class="hljs-literal">nullptr</span>);<br>    ~Dialog();<br><br><span class="hljs-keyword">private</span>:<br>    Ui::Dialog *ui;<br><span class="hljs-keyword">int</span> clickedCount_ = <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>dialog.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">Dialog::Dialog(QWidget *parent)<br>    : QDialog(parent)<br>    , ui(<span class="hljs-keyword">new</span> Ui::Dialog)<br>&#123;<br>    ui-&gt;setupUi(<span class="hljs-keyword">this</span>);<br>clickedCount_;<br><br>connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [&amp;]() &#123;<br>clickedCount_++;<br>ui-&gt;label-&gt;setText(QString::number(clickedCount_));<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码实现在按钮点击时，显示点击次数</p><p><img src="image-20210604203216486.png"></p><p>我之前的想法是：由于<code>lambda</code>中以引用隐式自动捕获<code>clickedCount_</code>（<code>[&amp;]</code>），所以当点击按钮时，<code>clickedCount_++</code>能改变被捕获的<code>clickedCount_</code>值，如果换成以复制隐式捕获被使用的自动变量<code>[=]</code>，那么当点击按钮时，将一直显示0。</p><p>测试一下：</p><p><code>dialog.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">Dialog::Dialog(QWidget *parent)<br>    : QDialog(parent)<br>    , ui(<span class="hljs-keyword">new</span> Ui::Dialog)<br>&#123;<br>    ui-&gt;setupUi(<span class="hljs-keyword">this</span>);<br>clickedCount_;<br><br>connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]() &#123;<br>clickedCount_++;<br>ui-&gt;label-&gt;setText(QString::number(clickedCount_));<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20210604203801126.png"></p><p>功能和按引用捕获完全一样，不讲武德啊。。。。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>查看文档得知：</p><blockquote><p>Lambda 捕获</p><p><em>捕获</em> 是零或更多<em>捕获符</em>的逗号分隔列表，可选地以 <em>默认捕获符</em> 开始。仅有的默认捕获符是</p><p><code>&amp;</code>（以引用隐式捕获被使用的自动变量）和</p><p><code>= </code>（以复制隐式捕获被使用的自动变量）。</p><p>当出现任一默认捕获符时，都能隐式捕获当前对象（<code>*this</code>）。当它被隐式捕获时，始终被以引用捕获，即使默认捕获符是 <code>=</code> 也是如此。</p></blockquote><p>原来是因为无论是<code>[=]</code>还是<code>[&amp;]</code>都会默认捕获<code>*this</code>的引用，所以上面的示例得到的结果是一样的。</p><p>找到原因后，心中的疑团终于解决了，值还会捕获引用，总感觉有点怪怪的。</p><p>继续向下看文档：</p><blockquote><p>当默认捕获符为 <code>=</code> 时，<code>*this</code> 的隐式捕获被弃用。 (C++20 起)</p></blockquote><p>那帮老头子们是不是也感觉<code>=</code>捕获引用不妥，<code>c++20</code>给取消了。</p><p>感觉更不讲武德了。。。。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>C++11</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>番茄工具rename引起的bug - 建议使用新式Qt connect 写法</title>
    <link href="/noob/2021/06/02/%E7%95%AA%E8%8C%84%E5%B7%A5%E5%85%B7rename%E5%BC%95%E8%B5%B7%E7%9A%84bug-%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%96%B0%E5%BC%8FQt-connect-%E5%86%99%E6%B3%95/"/>
    <url>/noob/2021/06/02/%E7%95%AA%E8%8C%84%E5%B7%A5%E5%85%B7rename%E5%BC%95%E8%B5%B7%E7%9A%84bug-%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%96%B0%E5%BC%8FQt-connect-%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>测试《Qt Creator快速入门 第3版》书中代码测试TCP发送数据引起的问题</p></blockquote><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>今天拿<strong>《Qt Creator快速入门 第3版》</strong>书中代码测试TCP发送数据，代码位于<code>src/18/18-9/tcpclient</code>下，<code>Client</code>类构造函数如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++">Client::Client(QWidget *parent) :<br>    QDialog(parent),<br>    ui(<span class="hljs-keyword">new</span> Ui::Client)<br>&#123;<br>    ui-&gt;setupUi(<span class="hljs-keyword">this</span>);<br><br>    payloadSize = <span class="hljs-number">64</span>*<span class="hljs-number">1024</span>; <span class="hljs-comment">// 64KB</span><br>    totalBytes = <span class="hljs-number">0</span>;<br>    bytesWritten = <span class="hljs-number">0</span>;<br>    bytesToWrite = <span class="hljs-number">0</span>;<br>    tcpClient = <span class="hljs-keyword">new</span> QTcpSocket(<span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-comment">// 当连接服务器成功时，发出connected()信号，开始传送文件</span><br>    connect(tcpClient, SIGNAL(connected()), <span class="hljs-keyword">this</span>, SLOT(startTransfer()));<br>    connect(tcpClient, SIGNAL(bytesWritten(qint64)),<br>            <span class="hljs-keyword">this</span>, SLOT(updateClientProgress(qint64)));<br>    connect(tcpClient, SIGNAL(error(QAbstractSocket::SocketError)),<br>            <span class="hljs-keyword">this</span>, SLOT(displayError(QAbstractSocket::SocketError)));<br>    ui-&gt;sendButton-&gt;setEnabled(<span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>强迫症驱使将代码用<strong>VassistX工具</strong>将类成员变量改名，改完后的代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++">Client::Client(QWidget *parent) :<br>    QDialog(parent),<br>    ui(<span class="hljs-keyword">new</span> Ui::Client)<br>&#123;<br>    ui-&gt;setupUi(<span class="hljs-keyword">this</span>);<br><br>    payloadSize_ = <span class="hljs-number">64</span>*<span class="hljs-number">1024</span>; <span class="hljs-comment">// 64KB</span><br>    totalBytes_ = <span class="hljs-number">0</span>;<br>    bytesWritten_ = <span class="hljs-number">0</span>;<br>    bytesToWrite_ = <span class="hljs-number">0</span>;<br>    tcpClient_ = <span class="hljs-keyword">new</span> QTcpSocket(<span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-comment">// 当连接服务器成功时，发出connected()信号，开始传送文件</span><br>    connect(tcpClient_, SIGNAL(connected()), <span class="hljs-keyword">this</span>, SLOT(startTransfer()));<br>    connect(tcpClient_, SIGNAL(bytesWritten_(qint64)),<br>            <span class="hljs-keyword">this</span>, SLOT(updateClientProgress(qint64)));<br>    connect(tcpClient_, SIGNAL(error(QAbstractSocket::SocketError)),<br>            <span class="hljs-keyword">this</span>, SLOT(displayError(QAbstractSocket::SocketError)));<br>    ui-&gt;sendButton-&gt;setEnabled(<span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译通过，但是却无法发送数据，又是检查网络又是检查数据折腾半天，还是没找到问题。最后发现是我用<strong>VassistX工具</strong>改变量名时，由于变量名和<code>QTcpSocket::bytesWritten</code>信号名相同，导致<code>SIGNAL</code>宏括号中的<code>bytesWritten_(qint64)</code>信号名（就是个字符串）也被改名了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">connect(tcpClient_, SIGNAL(bytesWritten_(qint64)),<br>        <span class="hljs-keyword">this</span>, SLOT(updateClientProgress(qint64)));<br></code></pre></td></tr></table></figure><p>关键是编译时没有任何错误提示，所以强烈推荐在Qt5中使用新式的<code>connect</code>写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">connect(tcpClient_, &amp;QTcpSocket::bytesWritten, <span class="hljs-keyword">this</span>, &amp;Client::updateClientProgress);<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">connect(tcpClient_, &amp;QTcpSocket::bytesWritten, [=](qint64 numBytes) &#123;<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li>通过<strong>VassistX工具</strong>改名不会改上面代码中的<code>&amp;QTcpSocket::bytesWritten</code>;</li><li>就算改了，或是不小心自己改了，编译器直接会给出如下错误提示<code>错误    C2039    “bytesWritten_”: 不是“QTcpSocket”的成员</code>。</li><li>不仅是信号名，<code>SIGNAL(bytesWritten(qint64))</code>这种写法，参数类型、顺序写错都不能写错，否则也会出现运行期错误，编译器改错总比运行期去排查错误要简单的多。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>除非要兼容Qt4，否则尽量使用新式的<code>connect</code>写法。</li><li>变量、函数命名尽量不要重复，个人感觉Qt开发变量名更推荐使用<code>bytes_written</code>这种写法，以减少与Qt自带函数、变量重名的概率。</li><li>能在编译器解决的问题，不要拖到运行期。比如：新式枚举<code>enum class</code>传参比直接传<code>int</code>、<code>QString</code>更容易在编译器发现问题。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码中的if…else杂谈3</title>
    <link href="/noob/2021/05/31/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84if%E2%80%A6else%E6%9D%82%E8%B0%883/"/>
    <url>/noob/2021/05/31/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84if%E2%80%A6else%E6%9D%82%E8%B0%883/</url>
    
    <content type="html"><![CDATA[<blockquote><p>if-else链过长的几个解决方法。</p><span id="more"></span></blockquote><h2 id="map映射"><a href="#map映射" class="headerlink" title="map映射"></a>map映射</h2><p>老代码中经常见到下面这种写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::showInfo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> QString&amp; _animal)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (_animal.isEmpty() == <span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (_animal == <span class="hljs-string">u8&quot;狗&quot;</span>)<br>&#123;<br><span class="hljs-comment">//各种复制粘贴的代码</span><br>ui-&gt;label-&gt;setText(<span class="hljs-string">u8&quot;狗有4条腿&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_animal == <span class="hljs-string">u8&quot;海鸥&quot;</span>)<br>&#123;<br><span class="hljs-comment">//各种复制粘贴的代码</span><br>ui-&gt;label-&gt;setText(<span class="hljs-string">u8&quot;海鸥有2条腿&quot;</span>); <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_animal == <span class="hljs-string">u8&quot;螃蟹&quot;</span>)<br>&#123;<br><span class="hljs-comment">//各种复制粘贴的代码</span><br>ui-&gt;label-&gt;setText(<span class="hljs-string">u8&quot;螃蟹有8条腿&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>这么写代码通常伴随着大量的复制粘贴，如果代码中不存在大量重复代码，这么写也可以接受。</li><li>如果后期经常需要增加<code>else-if</code>，这么写多少有点不妥。</li></ol><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>上述问题可以通过map映射的方式解决：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Animals</span></span><br><span class="hljs-class">&#123;</span><br>DOG,<br>CRAB,<span class="hljs-comment">//螃蟹</span><br>SEA_MEW <span class="hljs-comment">//海鸥</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AnimalInfo</span></span><br><span class="hljs-class">&#123;</span><br>AnimalInfo(QString _name, <span class="hljs-keyword">int</span> _legs) :<br>name(_name),<br>legs(_legs) &#123;&#125;<br><br>QString name;<br><span class="hljs-keyword">int</span> legs;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainWindow</span> :</span> <span class="hljs-keyword">public</span> QMainWindow<br>&#123;<br>    Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br>    MainWindow(QWidget *parent = <span class="hljs-literal">nullptr</span>);<br>    ~MainWindow();<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> QString&amp; _animal)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showInfo2</span><span class="hljs-params">(Animals _animal)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;Animals, AnimalInfo&gt; ANIMAL_MAP =<br>&#123;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;Animals, AnimalInfo&gt;(DOG, AnimalInfo(<span class="hljs-string">u8&quot;狗&quot;</span>, <span class="hljs-number">4</span>)),<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;Animals, AnimalInfo&gt;(CRAB, AnimalInfo(<span class="hljs-string">u8&quot;螃蟹&quot;</span>, <span class="hljs-number">8</span>)),<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;Animals, AnimalInfo&gt;(SEA_MEW, AnimalInfo(<span class="hljs-string">u8&quot;海鸥&quot;</span>, <span class="hljs-number">2</span>)),<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::showInfo</span><span class="hljs-params">(Animals _animal)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> it = ANIMAL_MAP.find(_animal);<br><span class="hljs-keyword">if</span> (ANIMAL_MAP.end() == it)<br><span class="hljs-keyword">return</span>;<br><br>QString animalsInfoText = QString(<span class="hljs-string">u8&quot;%1有%2条腿&quot;</span>)<br>.arg(it-&gt;second.name).arg(it-&gt;second.legs);<br><br>ui-&gt;label-&gt;setText(animalsInfoText);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>所有逻辑在最开始就已经写好，后期增加可能只需要修改<code>ANIMAL_MAP</code>，比使用<code>if-else</code>更加一目了然。</li><li>将<code>showInfo</code>的参数由字符串改为枚举，更方便在编译器发现问题。</li></ol><h2 id="界面状态的复杂逻辑"><a href="#界面状态的复杂逻辑" class="headerlink" title="界面状态的复杂逻辑"></a>界面状态的复杂逻辑</h2><p>可以借助<code>QStackedWidget</code>，<code>QButtonGroup</code>与<code>std::vector</code>、<code>std::map</code>配合来处理一些界面上的复杂逻辑。</p><p><img src="image-20210603195502508.png"></p><p>如上图所示，切换第一行的按钮，会改变第二行按钮的可点击状态，点第二个按钮会执行相关操作：</p><p><code>mainwindow.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QDialog&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QButtonGroup&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class">&#123;</span><br>SEA_MEW, <span class="hljs-comment">//海鸥</span><br>DOG, <span class="hljs-comment">//小狗</span><br>CRAB <span class="hljs-comment">//螃蟹</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Skill</span></span><br><span class="hljs-class">&#123;</span><br>SWIM,<span class="hljs-comment">//游</span><br>FLY, <span class="hljs-comment">//飞</span><br>RUN, <span class="hljs-comment">//跑</span><br>&#125;;<br><br><span class="hljs-keyword">using</span> SkillSet = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">set</span>&lt;Skill&gt;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AnimalInfo</span></span><br><span class="hljs-class">&#123;</span><br>AnimalInfo(Animal _animal, QString _name, SkillSet _skills)<br>: animal(_animal)<br>, skills(_skills)<br>, name(_name)&#123;&#125;<br><br>Animal animal;<br>QString name;<br>SkillSet skills;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainWindow</span> :</span> <span class="hljs-keyword">public</span> QDialog<br>&#123;<br>    Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MainWindow</span><span class="hljs-params">(QWidget *parent = <span class="hljs-literal">nullptr</span>)</span></span>;<br><br>signals:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">toDo</span><span class="hljs-params">(Animal, Skill)</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initUI</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setConnects</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>QButtonGroup* animalButtonGroup_ = <span class="hljs-literal">nullptr</span>;<br>QButtonGroup* skillButtonGroup_ = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;Skill, QString&gt;&gt;SKILL_VECTOR =<br>&#123;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;Skill, QString&gt;(Skill::SWIM, <span class="hljs-string">u8&quot;游&quot;</span>),<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;Skill, QString&gt;(Skill::FLY, <span class="hljs-string">u8&quot;飞&quot;</span>),<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;Skill, QString&gt;(Skill::RUN, <span class="hljs-string">u8&quot;跑&quot;</span>),<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;AnimalInfo&gt; ANIMAL_INFO_VECTOR = <br>&#123;<br>AnimalInfo(Animal::SEA_MEW, <span class="hljs-string">u8&quot;海鸥&quot;</span>, &#123;<br>Skill::SWIM,<br>Skill::FLY,<br>Skill::RUN,<br>&#125;),<br><br>AnimalInfo(Animal::DOG, <span class="hljs-string">u8&quot;小狗&quot;</span>,&#123;<br>Skill::RUN,<br>&#125;),<br><br>AnimalInfo(Animal::CRAB, <span class="hljs-string">u8&quot;螃蟹&quot;</span>,&#123;<br>Skill::SWIM,<br>Skill::RUN,<br>&#125;),<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>mainwindow.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QHBoxLayout&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QPushButton&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QMessageBox&gt;</span></span><br><br>MainWindow::MainWindow(QWidget *parent) :<br>QDialog(parent)<br>&#123;<br>initUI();<br>setConnects();<br>animalButtonGroup_-&gt;button(<span class="hljs-number">0</span>)-&gt;click();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::initUI</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>animalButtonGroup_ = <span class="hljs-keyword">new</span> QButtonGroup(<span class="hljs-keyword">this</span>);<br>QHBoxLayout* animalHLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>animalHLayout-&gt;setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>animalHLayout-&gt;setSpacing(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : ANIMAL_INFO_VECTOR)<br>&#123;<br><span class="hljs-keyword">auto</span> button = <span class="hljs-keyword">new</span> QPushButton(it.name, <span class="hljs-keyword">this</span>);<br>button-&gt;setCheckable(<span class="hljs-literal">true</span>);<br>animalHLayout-&gt;addWidget(button);<br>animalButtonGroup_-&gt;addButton(button, animalButtonGroup_-&gt;buttons().size());<br>&#125;<br><br>skillButtonGroup_ = <span class="hljs-keyword">new</span> QButtonGroup(<span class="hljs-keyword">this</span>);<br>QHBoxLayout* skillHLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>skillHLayout-&gt;setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>skillHLayout-&gt;setSpacing(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : SKILL_VECTOR)<br>&#123;<br><span class="hljs-keyword">auto</span> button = <span class="hljs-keyword">new</span> QPushButton(it.second, <span class="hljs-keyword">this</span>);<br>skillHLayout-&gt;addWidget(button);<br>skillButtonGroup_-&gt;addButton(button, skillButtonGroup_-&gt;buttons().size());<br>&#125;<br><br>QVBoxLayout* mainVLayout = <span class="hljs-keyword">new</span> QVBoxLayout;<br>mainVLayout-&gt;setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>mainVLayout-&gt;setSpacing(<span class="hljs-number">20</span>);<br><br>mainVLayout-&gt;addLayout(animalHLayout);<br>mainVLayout-&gt;addLayout(skillHLayout);<br>mainVLayout-&gt;addStretch(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">this</span>-&gt;setLayout(mainVLayout);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::setConnects</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>connect(animalButtonGroup_, <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">void</span>(QButtonGroup::*)(<span class="hljs-keyword">int</span>)&gt;(&amp;QButtonGroup::buttonClicked),<br>[=](<span class="hljs-keyword">int</span> _id) &#123;<br><span class="hljs-keyword">if</span> (_id &lt; <span class="hljs-number">0</span> || _id &gt;= ANIMAL_INFO_VECTOR.size())<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">auto</span> skills = ANIMAL_INFO_VECTOR[_id].skills;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; SKILL_VECTOR.size(); i++)<br>&#123;<br><span class="hljs-keyword">auto</span> skill = SKILL_VECTOR[i].first;<br><span class="hljs-keyword">auto</span> it = skills.find(skill);<br><span class="hljs-keyword">if</span> (it != skills.end())<br>skillButtonGroup_-&gt;button(i)-&gt;setEnabled(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">else</span><br>skillButtonGroup_-&gt;button(i)-&gt;setEnabled(<span class="hljs-literal">false</span>);<br>&#125;<br>&#125;);<br><br>connect(skillButtonGroup_, <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">void</span>(QButtonGroup::*)(QAbstractButton *)&gt;(&amp;QButtonGroup::buttonClicked),<br>[=](QAbstractButton *button) &#123; <br><span class="hljs-keyword">if</span> (button == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">auto</span> animalID = animalButtonGroup_-&gt;checkedId();<br>QString animalName = ANIMAL_INFO_VECTOR[animalID].name;<br>QString contentToShow = QString(<span class="hljs-string">u8&quot;%1会%2&quot;</span>).arg(animalName).arg(button-&gt;text());<br>QMessageBox::information(<span class="hljs-keyword">this</span>, <span class="hljs-string">u8&quot;提示&quot;</span>, contentToShow);<br>&#125;);<br><br><span class="hljs-comment">//connect(skillButtonGroup_, static_cast&lt;void(QButtonGroup::*)(int)&gt;(&amp;QButtonGroup::buttonClicked),</span><br><span class="hljs-comment">//[=](int _id) &#123;</span><br><span class="hljs-comment">//if (_id &lt; 0 || _id &gt;= SKILL_VECTOR.size())</span><br><span class="hljs-comment">//return;</span><br><br><span class="hljs-comment">//auto animalID = animalButtonGroup_-&gt;checkedId();</span><br><span class="hljs-comment">//auto animal = ANIMAL_INFO_VECTOR[animalID].animal;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//emit toDo(animal, SKILL_VECTOR[_id].first);</span><br><span class="hljs-comment">//&#125;);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如图所示：</p><p><img src="image-20210603200048781.png"></p><ol><li>配合<code>animalButtonGroup_</code>和<code>skillButtonGroup_</code>两个<code>QButtonGroup</code>，界面从创建到交互所需信息都包含到了<code>SKILL_VECTOR</code>、<code>ANIMAL_INFO_VECTOR</code>中。</li><li>第二行按钮的置灰逻辑只有12行代码，逻辑清晰且不受按钮个数增加的影响。</li><li>注释部分代码更像是日常使用（其上方代码只是为了演示），配合Qt反射实现的简单工厂模式（参见<code>简单工厂模式与Qt类反射2</code>）能使代码更加符合开-闭原则。</li></ol><h2 id="职责链"><a href="#职责链" class="headerlink" title="职责链"></a>职责链</h2><p>职责链模式有时也能减少该类<code>if-else</code>的出现。</p><h2 id="多态、工厂模式"><a href="#多态、工厂模式" class="headerlink" title="多态、工厂模式"></a>多态、工厂模式</h2><p>多态、工厂模式也是解决该类问题的有效方法，具体可参见<code>简单工厂模式与Qt类反射2</code>。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>编码规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码中的if…else杂谈2</title>
    <link href="/noob/2021/05/30/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84if%E2%80%A6else%E6%9D%82%E8%B0%882/"/>
    <url>/noob/2021/05/30/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84if%E2%80%A6else%E6%9D%82%E8%B0%882/</url>
    
    <content type="html"><![CDATA[<blockquote><p>if-else嵌套过深的几个解决方法-重载&lt;为主要例子。</p><span id="more"></span></blockquote><p><code>std::map</code>是我们常用的容器，虽然<code>c++11</code>后引入<code>std::unordered_map</code>减少了其“出镜率”，但是在<code>key</code>有序或对内存使用有严格要求时，<code>std::map</code>仍有其用武之地；<code>std::map</code>的内部实现是<code>红黑树</code>，<code>std::unordered_map</code>的实现方式是<code>哈希表</code>（也称<code>散列表</code>）</p><blockquote><p>std::map 是有序键值对容器，它的元素的键是唯一的。用比较函数 Compare 排序键。搜索、移除和插入操作拥有对数复杂度。 map 通常实现为红黑树。</p><p>在每个标准库使用比较 (Compare) 概念的位置，以等价关系检验唯一性。不精确而言，若二个对象 a 与 b 互相比较不小于对方 ： !comp(a, b) &amp;&amp; !comp(b, a) ，则认为它们等价（非唯一）。</p><p>unordered_map 是关联容器，含有带唯一键的键-值 pair 。搜索、插入和元素移除拥有平均常数时间复杂度。</p><p>元素在内部不以任何特定顺序排序，而是组织进桶中。元素放进哪个桶完全依赖于其键的哈希。这允许对单独元素的快速访问，因为一旦计算哈希，则它准确指代元素所放进的桶。</p><p>–引自<a href="https://zh.cppreference.com/w/cpp/container/map">std::map - cppreference.com</a>和<a href="https://zh.cppreference.com/w/cpp/container/unordered_map">std::unordered_map - cppreference.com</a></p></blockquote><p>由上文总结可得：</p><table><thead><tr><th>名称</th><th>std::map</th><th>std::unordered_map</th></tr></thead><tbody><tr><td>有序性</td><td><strong>有序</strong></td><td>无序</td></tr><tr><td>内部实现</td><td>红黑树</td><td>哈希表</td></tr><tr><td>平均时间复杂度</td><td>O(logN)</td><td><strong>O(1)</strong></td></tr><tr><td>内存占用</td><td></td><td>高，类似于vector,需要提前申请内存，用以存储哈希表</td></tr><tr><td>要求</td><td>实现 &lt;</td><td>有哈希函数</td></tr></tbody></table><h2 id="重载-lt"><a href="#重载-lt" class="headerlink" title="重载 &lt;"></a>重载 &lt;</h2><p>有如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point3D</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br><span class="hljs-keyword">int</span> z;<br>&#125;;<br><br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;Point3D, <span class="hljs-keyword">double</span>&gt; pointMap;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>Point3D point1;<br>point1.x = <span class="hljs-number">1</span>;<br>point1.y = <span class="hljs-number">2</span>;<br>point1.z = <span class="hljs-number">3</span>;<br>pointMap.insert(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">pair</span>&lt;Point3D, <span class="hljs-keyword">double</span>&gt;(point1, <span class="hljs-number">1.0</span>));<br><br>    <span class="hljs-keyword">return</span> a.exec();<br>&#125;<br></code></pre></td></tr></table></figure><p>无法通过编译，在<code>VS2017 X64</code>下提示如下错误：</p><blockquote><p>错误    C2678    二进制“&lt;”: 没有找到接受“const _Ty”类型的左操作数的运算符(或没有可接受的转换)</p></blockquote><p>很显然，<code>Point3D</code>需要重载<code>&lt;</code>。</p><h3 id="第一次重载-lt"><a href="#第一次重载-lt" class="headerlink" title="第一次重载  &lt;"></a>第一次重载  &lt;</h3><p>记得第一次遇到这问题时，系统某个数据结构是个<strong>三段式</strong>，第一次写出了类似这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point3D</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br><span class="hljs-keyword">int</span> z;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Point3D&amp; rhs) <span class="hljs-keyword">const</span><br>&#123;<br><span class="hljs-keyword">if</span> (x &lt;= rhs.x)<br>&#123;<br><span class="hljs-keyword">if</span> (x &lt; rhs.x)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-comment">//相等</span><br>&#123;<br><span class="hljs-keyword">if</span> (y &lt;= rhs.y)<br>&#123;<br><span class="hljs-keyword">if</span> (y &lt; rhs.y)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-comment">//相等</span><br>&#123;<br><span class="hljs-keyword">return</span> z &lt;= rhs.z;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>工程中全文搜索<code>operator &lt;</code>-复制-粘贴老代码-修改，一气呵成。</p><h3 id="方法1：提前return"><a href="#方法1：提前return" class="headerlink" title="方法1：提前return"></a>方法1：提前return</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point3D</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br><span class="hljs-keyword">int</span> z;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Point3D&amp; rhs) <span class="hljs-keyword">const</span><br>&#123;<br><span class="hljs-keyword">if</span> (x &gt; rhs.x)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (x &lt; rhs.x)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span> (y &gt; rhs.y)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (y &lt; rhs.y)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">return</span> z &lt; rhs.z;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>该方法降低了嵌套层数。</p><p>对于某些条件不符合需要立即返回的应立即返回，比如判断指针为<code>nullptr</code>、<code>ComboBox</code>的<code>index == -1</code>，<code>std::vector::empty()</code>等。</p><p>提交代码-颇费~</p><p>没想到C++11后，该方法又有点跟不上时代了</p><h3 id="方法2：C-11方法"><a href="#方法2：C-11方法" class="headerlink" title="方法2：C++11方法"></a>方法2：C++11方法</h3><p>C++引入了<code>std::tuple</code> ,有时<em>cppreference中文版</em>真是难懂，这里贴出来其英文版上关于<code>std::tuple</code>的介绍</p><blockquote><p>Class template <code>std::tuple</code> is a fixed-size collection of heterogeneous values. It is a generalization of <a href="https://en.cppreference.com/w/cpp/utility/pair">std::pair</a>.</p></blockquote><p><code>std::tuple</code>已经重载了如下操作符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">operator</span>==<br><span class="hljs-keyword">operator</span>!=<br><span class="hljs-keyword">operator</span>&lt;<br><span class="hljs-keyword">operator</span>&lt;=<br><span class="hljs-keyword">operator</span>&gt;<br><span class="hljs-keyword">operator</span>&gt;=<br><span class="hljs-keyword">operator</span>&lt;=&gt;(C++<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>关于 <code>&lt;</code> 有如下介绍：</p><blockquote><p>Compares <code>lhs</code> and <code>rhs</code> lexicographically by operator&lt;, that is, compares the first elements, if they are equivalent, compares the second elements, if those are equivalent, compares the third elements, and so on.</p><p>For non-empty tuples, (3) is equivalent to</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">0</span>&gt;(lhs) &lt; <span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">0</span>&gt;(rhs)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">0</span>&gt;(rhs) &lt; <span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">0</span>&gt;(lhs)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">1</span>&gt;(lhs) &lt; <span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">1</span>&gt;(rhs)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">1</span>&gt;(rhs) &lt; <span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">1</span>&gt;(lhs)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>...<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::get&lt;N - <span class="hljs-number">1</span>&gt;(lhs) &lt; <span class="hljs-built_in">std</span>::get&lt;N - <span class="hljs-number">1</span>&gt;(rhs);<br></code></pre></td></tr></table></figure></blockquote><p>可有看得出，他也是通过提前return实现的。</p><p>所以我们可以借助<code>std::tie</code>,创造两个临时的<code>std::tuple</code> ，让<code>std::tuple</code>们自己去比较大小。</p><blockquote><p><code>std::tie</code>：Creates a tuple of lvalue references to its arguments or instances of <a href="https://en.cppreference.com/w/cpp/utility/tuple/ignore">std::ignore</a>.</p></blockquote><p>所以在<code>c++11</code> -<code>c++17</code>版本中，<code>struct</code>重载<code>&lt;</code>，可以最终简化为:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point3D</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br><span class="hljs-keyword">int</span> z;<br><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Point3D&amp; rhs) <span class="hljs-keyword">const</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::tie(x, y, z) &lt; <span class="hljs-built_in">std</span>::tie(rhs.x, rhs.y, rhs.z);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>从<code>C++20</code>起，可以使用新操作符<code>&lt;=&gt;</code>代替被废弃的<code>&lt;</code></p><blockquote><p>The <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, and <code>!=</code> operators are <a href="https://en.cppreference.com/w/cpp/language/operators#Relational_operators">synthesized</a> from <code>operator&lt;=&gt;</code> and <code>operator==</code> respectively. (since C++20)</p></blockquote><h3 id="防止嵌套过程其他方法：合并条件"><a href="#防止嵌套过程其他方法：合并条件" class="headerlink" title="防止嵌套过程其他方法：合并条件"></a>防止嵌套过程其他方法：合并条件</h3><p>对于可以合并的条件应该将其合并，这样能减少路径，降低阅读、维护、单元测试难度。特别是某些只有if没有else的语句，合并后不仅能减少路径，甚至还能减少嵌套层数，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (point1.x == <span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (point1.y == <span class="hljs-number">4</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (point1.z == <span class="hljs-number">5</span>)<br>&#123;<br>...<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以合并为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (point1.x == <span class="hljs-number">3</span> &amp;&amp; point1.y == <span class="hljs-number">4</span> &amp;&amp; point1.z == <span class="hljs-number">5</span>)<br>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.cppreference.com/w/cpp/container/map">cppreference-map</a></p><p><a href="https://zh.cppreference.com/w/cpp/container/unordered_map">cppreference-unordered_map</a></p><p><a href="https://en.cppreference.com/w/cpp/utility/tuple">cppreference-tuple</a></p><p><a href="https://en.cppreference.com/w/cpp/utility/tuple/tie">cppreference-tie</a></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>编码规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码中的if…else杂谈1</title>
    <link href="/noob/2021/05/29/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84if%E2%80%A6else%E6%9D%82%E8%B0%881/"/>
    <url>/noob/2021/05/29/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84if%E2%80%A6else%E6%9D%82%E8%B0%881/</url>
    
    <content type="html"><![CDATA[<blockquote><p>if-else过多的部分问题分析。</p></blockquote><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="if_image.jpg"></p><p>很多编码规范/设计模式/重构方面的书、很多公司的编码规范都提到过if-else嵌套过深/if-else过多这些个“坏味道”，公司的或从学校出来的”屎山代码”或多或少有这些味道，形如：</p><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(...)<br>&#123;<br>    <span class="hljs-keyword">if</span>(...)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(...)<br>        &#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(...)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(...)<br>        &#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种类型的if-else应该是最应该避免的，因为这么写的问题最多：</p><ol><li>维护困难：当嵌套层数太深后，想搞明白整段代码相当困难；</li><li>单元测试困难：需要的测试用例太多，很难覆盖所有情况；</li><li>误导“后浪”：坏的习惯会传染人，特别是当新人维护这段代码时很容易就把这种不好的习惯学走；就算是老人维护，在时间紧张或怕无法理清楚整体逻辑时，只能继续嵌套更多if-else，让代码“莫名其妙的”正确运行起来。</li><li>影响预读和cache命中：两年前面试时被问到了这个问题，当时只提到了前面几点，后来才想起来面试官最想要这个答案，愧对我的导师兼《微机原理》课老师。CPU都是多级流水线架构运行，如果分支预测成功，很多指令都提前进入流水线流程中，则流水线中指令运行的非常顺畅，而如果分支预测失败，则需要清空流水线中的那些预测出来的指令，重新加载正确的指令到流水线中执行，然而现代CPU的流水线级数非常长，分支预测失败会损失10-20个左右的<a href="http://www.hqchip.com/app/1045">时钟</a>周期，因此对于复杂的流水线，好的分支预测方法非常重要。（引自<a href="http://www.elecfans.com/d/1491355.html">if-else的效率有多低你知道吗？-电子发烧友网 (elecfans.com)</a>;</li></ol><p>又如：</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(...)<br>&#123;<br>    ...<span class="hljs-comment">//重复一堆</span><br>    type = <span class="hljs-string">u8&quot;狗&quot;</span>;<br>    ...<span class="hljs-comment">//重复一堆</span><br>    legs = <span class="hljs-number">4</span>;<br>    run(type, legs);<br>    ...<span class="hljs-comment">//其他重复一堆</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(...)<br>&#123;<br>    ...<span class="hljs-comment">//重复一堆</span><br>    type = <span class="hljs-string">u8&quot;海鸥&quot;</span>;<br>    ...<span class="hljs-comment">//重复一堆</span><br>    legs = <span class="hljs-number">2</span>;<br>    run(type, legs);<br>    ...<span class="hljs-comment">//其他重复一堆</span><br>&#125;<br><br>...<br>    <br><span class="hljs-keyword">else</span><br>&#123;<br>    ...<span class="hljs-comment">//重复一堆</span><br>    type = <span class="hljs-string">u8&quot;螃蟹&quot;</span>;<br>    ...<span class="hljs-comment">//重复一堆</span><br>    legs = <span class="hljs-number">8</span>;<br>    run(type, legs);<br>    ...<span class="hljs-comment">//其他重复一堆</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>个人感觉这种链式的if-else可以接受；</li><li>但是这种写法经常会伴随着大量的复制-粘贴，这就有“坏味道”了。</li><li><code>switch-case</code>也有同样的问题。</li></ol><p>更有甚者：</p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">bool</span> b1; <span class="hljs-comment">//(就不初始化 (¬､¬))</span><br><span class="hljs-keyword">bool</span> b2;<br><span class="hljs-keyword">bool</span> b3;<br><span class="hljs-keyword">bool</span> b4;<br><span class="hljs-keyword">bool</span> b5;<br>... <span class="hljs-comment">//省略同一函数中1024条代码</span><br>b1 = <span class="hljs-literal">true</span>;<br>...<br>b2 = <span class="hljs-literal">false</span>;<br>b3 = <span class="hljs-literal">true</span>;<br>... <span class="hljs-comment">//省略同一函数中又1024条代码</span><br>b4 = <span class="hljs-literal">false</span>;<br>b5 = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span>(b1 &amp;&amp; b2 || !b3 &amp;&amp; b4 || b5)<br>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!b1 || b2 &amp;&amp; !b3 &amp;&amp; b4 || b5)<br>&#123;<br>    <br>&#125;<br>...<span class="hljs-comment">//省略10086种情况</span><br><span class="hljs-keyword">else</span><br>&#123;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>学校出来的代码不少这么写的，丝毫没有夸张成分。这已经不仅仅是if-else多的问题了，还有个滥用标志位的问题：</p><ol><li>标志位不初始化；</li><li><code>RadioButton</code>的按下状态需要标志位记录；</li><li><code>vector::empty()</code>是否为<code>true</code>需要标志位记录；</li><li><code>ComboBox</code>是否选择第一行需要标志位记录；</li><li>……</li></ol><p>类大、函数长</p><blockquote><p>（假如我的一个函数能实现5个功能，一个类有50个这种函数，那么我这个类就可以实现250个功能， 我真是个小机灵鬼(¬､¬)）</p></blockquote><p>标志位多、if-else一长串，维护起来相当困难。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人感觉<code>if-else</code>既不是洪水猛兽，也不能放任发展。不能要求每个人都会<code>设计模式</code>，况且大佬们对是否应该使用<code>设计模式</code>都意见不一。日常编码中注意最常见的问题即可，没必要反<code>if-else</code>反到“洁癖”。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://www.elecfans.com/d/1491355.html">电子发烧友网</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>编码规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式与信号中心3</title>
    <link href="/noob/2021/05/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%A1%E5%8F%B7%E4%B8%AD%E5%BF%833/"/>
    <url>/noob/2021/05/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%A1%E5%8F%B7%E4%B8%AD%E5%BF%833/</url>
    
    <content type="html"><![CDATA[<blockquote><p>信号中心的实现及其注意事项。</p></blockquote><span id="more"></span><h2 id="信号中心"><a href="#信号中心" class="headerlink" title="信号中心"></a>信号中心</h2><p>信号中心用来转发<strong>单例模式与信号中心1-开头问题</strong>中的信号，可大大减少信号的传递次数和函数调用的层数，其实现方式如下所示：</p><p><code>signalcenter.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QObject&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SignalCenter</span> :</span> <span class="hljs-keyword">public</span> QObject<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br>SignalCenter(<span class="hljs-keyword">const</span> SignalCenter&amp;) = <span class="hljs-keyword">delete</span>;<br>SignalCenter(SignalCenter&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><br>SignalCenter&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> SignalCenter&amp;) = <span class="hljs-keyword">delete</span>;<br>SignalCenter&amp; <span class="hljs-keyword">operator</span>=(SignalCenter&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> SignalCenter&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">static</span> SignalCenter instance;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br>SignalCenter() = <span class="hljs-keyword">default</span>;<br><br>signals:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">senderButtonClicked</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>该类需继承自<code>QObject</code>;</li><li>使用<code>Q_OBJECT</code>宏并定义相关信号。</li></ol><p><code>senderframe.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;senderframe.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QHBoxLayout&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;signalcenter.h&quot;</span></span><br><br>SenderFrame::SenderFrame(QWidget *parent) :<br>    QFrame(parent)<br>&#123;<br>init();<br>&#125;<br><br>SenderFrame::~SenderFrame()<br>&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SenderFrame::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>button_ = <span class="hljs-keyword">new</span> QPushButton(<span class="hljs-string">u8&quot;发送&quot;</span>,<span class="hljs-keyword">this</span>);<br><br>QHBoxLayout* hLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>hLayout-&gt;addWidget(button_);<br><br><span class="hljs-keyword">this</span>-&gt;setLayout(hLayout);<br><span class="hljs-keyword">this</span>-&gt;setStyleSheet(<span class="hljs-string">&quot;background:blue;&quot;</span>);<br><br><span class="hljs-comment">//为了演示简单，将connect写在了类里面，这样会导致该类所有的实例都会connect</span><br>connect(button_, &amp;QPushButton::clicked, <br>&amp;SignalCenter::getInstance(), &amp;SignalCenter::senderButtonClicked);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>receiverframe.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;receiverframe.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QHBoxLayout&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;signalcenter.h&quot;</span></span><br><br>ReceiverFrame::ReceiverFrame(QWidget *parent) :<br>    QFrame(parent)<br>&#123;<br>init();<br>&#125;<br><br>ReceiverFrame::~ReceiverFrame()<br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ReceiverFrame::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>label_ = <span class="hljs-keyword">new</span> QLabel(<span class="hljs-keyword">this</span>);<br><br>QHBoxLayout* hLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>hLayout-&gt;addWidget(label_);<br><br><span class="hljs-keyword">this</span>-&gt;setLayout(hLayout);<br><span class="hljs-keyword">this</span>-&gt;setStyleSheet(<span class="hljs-string">&quot;background:green;&quot;</span>);<br><br><span class="hljs-comment">//为了演示简单，将connect写在在类里面，这样会导致该类所有的实例都会connect</span><br>connect(&amp;SignalCenter::getInstance(), &amp;SignalCenter::senderButtonClicked, [=]() &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>label_-&gt;setText(QString(<span class="hljs-string">u8&quot;第%1次点击&quot;</span>).arg(++i));<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>senderframe.cpp</code>、<code>receiverframe.cpp</code>中各自与<code>SignalCenter</code>单例类<code>connect</code>，借助于<code>SignalCenter</code>单例类完成了信号的转发；</li><li>如注释所言，为了演示简单，该例将<code>connect</code>写在了类里面，这样会导致该类所有的实例都会<code>connect</code>,比如<code>ReceiverFrame</code>类公用，被实例化了两个实例，这样会导致点击一次按钮，两个实例都改变文字。所以将与<code>SignalCenter</code>单例类的<code>connect</code>，放到其父控件中更合适。</li></ol><p><code>mainwindow.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;receiverframe.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;senderframe.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QHBoxLayout&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QDateTime&gt;</span></span><br><br>MainWindow::MainWindow(QWidget *parent)<br>    : QDialog(parent)<br>&#123;<br>init();<br>&#125;<br><br>MainWindow::~MainWindow()<br>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainWindow::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">auto</span> senderFrame = <span class="hljs-keyword">new</span> SenderFrame(<span class="hljs-keyword">this</span>);<br><span class="hljs-keyword">auto</span> receiverFrame = <span class="hljs-keyword">new</span> ReceiverFrame(<span class="hljs-keyword">this</span>);<br><br>QHBoxLayout* hLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>hLayout-&gt;setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>hLayout-&gt;setSpacing(<span class="hljs-number">20</span>);<br><br>hLayout-&gt;addWidget(senderFrame);<br>hLayout-&gt;addWidget(receiverFrame);<br><br><span class="hljs-keyword">this</span>-&gt;setLayout(hLayout);<br><span class="hljs-keyword">this</span>-&gt;setStyleSheet(<span class="hljs-string">&quot;background:yellow;&quot;</span>);<br><span class="hljs-keyword">this</span>-&gt;setFixedSize(<span class="hljs-number">600</span>, <span class="hljs-number">400</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，在<code>mainwindow.cpp</code>中只是实例化了<code>SenderFrame</code>和<code>ReceiverFrame</code>类，并没有<code>connect</code>二者，但是信号正常的由<code>SenderFrame</code>发送到了<code>ReceiverFrame</code>类。运行结果如下：</p><p><img src="image-20210528201626561.png"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式与Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式与信号中心2</title>
    <link href="/noob/2021/05/26/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%A1%E5%8F%B7%E4%B8%AD%E5%BF%832/"/>
    <url>/noob/2021/05/26/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%A1%E5%8F%B7%E4%B8%AD%E5%BF%832/</url>
    
    <content type="html"><![CDATA[<blockquote><p>单例模式懒汉式实现的几种实现方式及其优缺点、最推荐的单例模式。</p></blockquote><span id="more"></span><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>懒汉式：默认不会实例化，当需要的时候才会实例化。特点是延迟加载。</p><h4 id="最常规的实现"><a href="#最常规的实现" class="headerlink" title="最常规的实现"></a>最常规的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">//省略上文中的注释1和注释2</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">static</span> Singleton * <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">nullptr</span>)<br>instance = <span class="hljs-keyword">new</span> Singleton();<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">static</span> Singleton *instance;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>只有当第一次调用<code>getInstance()</code>方法时，才会实例化该单例类；</li><li>该实现方式只适用于单线程环境下，如果多个线程同时第一次执行<code>if (instance == nullptr)</code>判断<code>instance </code>是否为空，此时所有的线程都会去实例化该单例，导致单例不再”单”；</li></ol><p><strong>该实现方法只可应用于单线程环境中。</strong></p><h4 id="加锁实现"><a href="#加锁实现" class="headerlink" title="加锁实现"></a>加锁实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//省略上文中的注释1和注释2</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">static</span> Singleton * <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">QMutexLocker <span class="hljs-title">locker</span><span class="hljs-params">(&amp;mutex)</span></span>;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">nullptr</span>)<br>instance = <span class="hljs-keyword">new</span> Singleton();<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">static</span> Singleton *instance;<br><span class="hljs-keyword">static</span> QMutex mutex;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>同上1；</li><li>由于锁的存在，该实现方法可以应用于多线程环境中，不会出现上2的问题；</li><li>每次调用<code>getInstance()</code>函数都要进入临界区，消耗略大。</li></ol><h4 id="双检锁实现"><a href="#双检锁实现" class="headerlink" title="双检锁实现"></a>双检锁实现</h4><p>能不能只在没有实例化单例类时加锁呢？双检锁实现就是这种思路。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//省略上文中的注释1和注释2</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">static</span> Singleton * <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">nullptr</span>) <span class="hljs-comment">//①只有在instance为空时才需要加锁-构造-解锁</span><br>&#123;<br><span class="hljs-function">QMutexLocker <span class="hljs-title">locker</span><span class="hljs-params">(&amp;mutex)</span></span>;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">nullptr</span>)<br>instance = <span class="hljs-keyword">new</span> Singleton(); <span class="hljs-comment">//②</span><br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">static</span> Singleton *instance;<br><span class="hljs-keyword">static</span> QMutex mutex;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>只比<strong>加锁实现</strong>多了一行代码，就大大提高了效率。</li><li>该实现方法存在着一个严重的问题：构造过程不是原子操作，好巧不巧，在某些平台上会出现A线程正在②处执行构造，B线程来到①处判空，如果此时构造不完全，但是<code>instance</code>指针已被赋值，那么B线程会拿着一个未构造完全的实例使用。</li></ol><p><strong>遗憾的是C++11以前的版本对此无能为力。</strong></p><p>《Head First 设计模式》中有提到在<code>java</code>语言中，可以通过在声明变量时加<code>volatile</code>关键词解决这个问题，其他地方类似于C++双检锁实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton instance;<br></code></pre></td></tr></table></figure><p>该书注释中提到，在1.4及更早版本的<code>java</code>中，许多<code>JVM</code>对于<code>volatile</code>关键字的实现会导致双检锁的失效。</p><p>网上搜了以下，这是一个非常远古的版本。。。。。而我们的C++一直到C++11才解决该问题，orz。这难能可贵的重大更新，赶快”早买早享受”啊。</p><h4 id="C-11实现"><a href="#C-11实现" class="headerlink" title="C++11实现"></a>C++11实现</h4><p>在C++11标准中，新增对于局部静态变量初始化具有线程安全性的要求。</p><blockquote><p>Variables declared at block scope with the specifier <code>static</code> or <code>thread_local</code> (since C++11) have static or thread (since C++11) storage duration but are initialized the first time control passes through their declaration (unless their initialization is <a href="https://en.cppreference.com/w/cpp/language/zero_initialization">zero-</a> or <a href="https://en.cppreference.com/w/cpp/language/constant_initialization">constant-initialization</a>, which can be performed before the block is first entered). On all further calls, the declaration is skipped.</p><p>If multiple threads attempt to initialize the same static local variable concurrently, the initialization occurs exactly once (similar behavior can be obtained for arbitrary functions with <a href="https://en.cppreference.com/w/cpp/thread/call_once">std::call_once</a>).</p><p>Note: usual implementations of this feature use variants of the double-checked locking pattern, which reduces runtime overhead for already-initialized local statics to a single non-atomic boolean comparison.</p></blockquote><p>所以可以借助该特性，采用如下的方式实现单例类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//省略上文中的注释1和注释2</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">static</span> Singleton &amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">static</span> Singleton instance;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>只有当第一次调用<code>getInstance()</code>方法时，才会实例化该单例类</li><li>如果多个线程试图同时初始化同一静态局部变量，则初始化严格发生一次，所以该实现是线程安全的，颇费~</li></ol><p>其他实现可以围观这位大佬的博客，真是大开眼界<a href="https://www.cnblogs.com/zxh1210603696/p/4157294.html">C++程序员们，快来写最简洁的单例模式吧 - 老司机 - 博客园 (cnblogs.com)</a>，也侧面反映了C++的难度。。。。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/zxh1210603696/p/4157294.html">博客园</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://en.cppreference.com/w/cpp/language/storage_duration#.E9.9D.99.E6.80.81.E5.B1.80.E9.83.A8.E5.8F.98.E9.87.8F">cppreference</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.cnblogs.com/sunchaothu/p/10389842.html">博客园</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>设计模式与Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式与信号中心1</title>
    <link href="/noob/2021/05/26/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%A1%E5%8F%B7%E4%B8%AD%E5%BF%831/"/>
    <url>/noob/2021/05/26/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%A1%E5%8F%B7%E4%B8%AD%E5%BF%831/</url>
    
    <content type="html"><![CDATA[<blockquote><p>信号中心的作用、单例模式介绍、饿汉式方式实现。</p></blockquote><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如下为一较为复杂的界面布局图，假设, A1/A11/A2/A21/分别为独立的控件类，<code>A111</code>为一<code>Button</code>，<code>A211</code>为一<code>Label</code>。<br>需求：当点击<code>Button</code>A111时，<code>Label</code>A211做相应逻辑联动，比如<code>Label</code>显示<code>Button</code>的点击总次数。</p><p><img src="1.png"></p><p>通常的做法是当<code>A111</code>点击时，</p><p><code>A111</code>—-<code>connect</code>—–&gt;<code>A11控件</code>—-<code>connect</code>—–&gt;<code>A1控件</code>—-<code>connect</code>—–&gt;<code>A控件</code>—-<code>connect并set</code>—–&gt;</p><p><code>A2控件</code>—-<code>set</code>—–&gt;<code>A21控件</code>—-<code>set</code>—–&gt;<code>A211控件</code>———-&gt;<code>显示点击总次数</code></p><p>整个流程走下来信号转信号，接口调接口，相当繁琐。</p><p>通常下应该避免出现这种问题，万一有这种需求，可以：</p><ol><li>减少小类封装，以适当减少封装层数；</li><li>提刀去见产品经理；</li><li>信号中心转发信号。</li></ol><p>信号中心通常设计为单例模式。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）是 <del>Java</del> （也是C++)中最<del>简单</del>(划掉)的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><blockquote><ol><li>单例类只能有一个实例（应该禁止赋值和拷贝）</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol></blockquote><p>引自<a href="https://www.runoob.com/design-pattern/singleton-pattern.html">单例模式 | 菜鸟教程 (runoob.com)</a></p><p>通常的单例模式形式如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>Singleton(<span class="hljs-keyword">const</span> Singleton&amp;) = <span class="hljs-keyword">delete</span>; <span class="hljs-comment">//注释1（下文省略该处）：以下四行对应1禁止赋值和拷贝；</span><br>Singleton(Singleton&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><br>Singleton&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Singleton&amp;) = <span class="hljs-keyword">delete</span>;<br>Singleton&amp; <span class="hljs-keyword">operator</span>=(Singleton&amp;&amp;) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> Singleton&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> <span class="hljs-comment">//注释3：对应3使用 static 类成员函数`getInstance()`返回唯一实例。</span></span><br><span class="hljs-function"></span>&#123;<br>XXXXXX <span class="hljs-comment">//以下内容专门讨论该处</span><br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br>Singleton() = <span class="hljs-keyword">default</span>; <span class="hljs-comment">//注释2（下文省略该处）：对应2禁止用户自己声明并定义实例；</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>禁止赋值和拷贝；</li><li>禁止用户自己声明并定义实例；</li><li>使用 static 类成员函数<code>getInstance()</code>返回唯一实例。</li></ol><p>常见的单例模式实现方法分为饿汉式和懒汉式。</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>饿汉式：类加载的时候就实例化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//省略上文中的注释1和注释2</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">static</span> Singleton* instance;<br>&#125;;<br><br>Singleton* Singleton::instance = <span class="hljs-keyword">new</span> Singleton;<br><br></code></pre></td></tr></table></figure><p>至此，我们可以说单例模式毕竟是是最简单的设计模式，连实现起来都这么简单，不用理会懒汉式这么多痛苦。颇费~</p><p>但是饿汉式也有不足，就是程序加载时就实例化；</p><ol><li>如果该类实例化需要较长时间，可能会拖慢系统启动时间。</li><li>如果单例类是个不常用的类，并不是每次运行都需要加载，这还会浪费空间。</li></ol><p><strong>即使在不支持C++11的编译器版本，也可将该实现方法应用于多线程环境中。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.runoob.com/design-pattern/singleton-pattern.html">runoob.com</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>设计模式与Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式模式与Qt信号槽</title>
    <link href="/noob/2021/05/22/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E4%BF%A1%E5%8F%B7%E6%A7%BD/"/>
    <url>/noob/2021/05/22/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E4%BF%A1%E5%8F%B7%E6%A7%BD/</url>
    
    <content type="html"><![CDATA[<p>填坑中</p>]]></content>
    
    
    <categories>
      
      <category>设计模式与Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单工厂模式与Qt类反射2</title>
    <link href="/noob/2021/05/18/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E7%B1%BB%E5%8F%8D%E5%B0%842/"/>
    <url>/noob/2021/05/18/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E7%B1%BB%E5%8F%8D%E5%B0%842/</url>
    
    <content type="html"><![CDATA[<blockquote><p>反射实现简单工厂模式。</p></blockquote><span id="more"></span><p>前文《简单工厂模式与Qt类反射1》中简单工厂模式缺点3说：<strong>这不就是<code>LanguageShow()</code>函数把违反开闭原则的锅甩给了<code>Factory::CreateObject()</code>函数吗？</strong>，本文通过反射解决该问题。</p><p>之前写过一段时间WPF，受WPF大佬NaBian的控件库 <a href="https://handyorg.github.io/handycontrol/">HandyControl | HandyOrg</a>   <a href="https://github.com/nabian/handycontrol">github.com</a> 启发，知道了C#语言可以通过反射机制实现简单工厂模式。</p><p>但是C++语言本身没有反射机制，只好借用Qt的反射来实现。</p><h2 id="反射实现简单工厂"><a href="#反射实现简单工厂" class="headerlink" title="反射实现简单工厂"></a>反射实现简单工厂</h2><p><code>language.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QMetaEnum&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MetaEnums</span> :</span> <span class="hljs-keyword">public</span> QObject<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MetaEnums</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">QObject</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">LanguageType</span></span><br><span class="hljs-class">&#123;</span><br>C,<br>CPP,<br>Python<br>&#125;;<br><br>Q_ENUM(LanguageType)<br><br><span class="hljs-function">QString <span class="hljs-title">LanguageTypeToString</span><span class="hljs-params">(LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br>QMetaEnum metaEnum = QMetaEnum::fromType&lt;LanguageType&gt;();<br><span class="hljs-keyword">return</span> QString(metaEnum.valueToKey(type)) + <span class="hljs-string">&quot;Language&quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LanguageBase</span> :</span> <span class="hljs-keyword">public</span> QObject<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">LanguageBase</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">QObject</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Q_INVOKABLE <span class="hljs-keyword">explicit</span> <span class="hljs-title">CLanguage</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">LanguageBase</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m C&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPPLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Q_INVOKABLE <span class="hljs-keyword">explicit</span> <span class="hljs-title">CPPLanguage</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">LanguageBase</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m CPP&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PythonLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Q_INVOKABLE <span class="hljs-keyword">explicit</span> <span class="hljs-title">PythonLanguage</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">LanguageBase</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m Python&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cTypeId = qRegisterMetaType&lt;CLanguage*&gt;();<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cppTypeId = qRegisterMetaType&lt;CPPLanguage*&gt;();<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> pythonTypeId = qRegisterMetaType&lt;PythonLanguage*&gt;();<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">LanguageBase* <span class="hljs-title">CreateObject</span><span class="hljs-params">(MetaEnums::LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br>MetaEnums metaEnums;<br><span class="hljs-keyword">auto</span> className = metaEnums.LanguageTypeToString(type) + <span class="hljs-string">&quot;*&quot;</span>;<br><br><span class="hljs-keyword">int</span> classTypeID = QMetaType::type(className.toLocal8Bit().data());<br><span class="hljs-keyword">const</span> QMetaObject *theMetaObject = QMetaType::metaObjectForType(classTypeID);<br><span class="hljs-keyword">if</span> (theMetaObject == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>QObject *obj = theMetaObject-&gt;newInstance(Q_ARG(QObject*, <span class="hljs-literal">nullptr</span>));<br>LanguageBase *languageBase = qobject_cast&lt;LanguageBase*&gt;(obj);<br><span class="hljs-keyword">return</span> languageBase;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其他函数同上。</p><p><code>Factory::CreateObject()</code>函数终于不用背违反开闭原则的锅了。</p><p>需要有几个注意事项，否则可能一直Create不出Object。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>需要有<code>LanguageTypeToString()</code>函数将枚举转换为字符串，而且枚举不能用c++11新特性<code>enum class</code>,只能用<code>enum</code>;</p><p>这里如果用<code>switch-case</code>或<code>if-else</code>得到类名，那还不如直接用普通的简单工厂方式；</p></li><li><p>类需要继承自<code>QObject</code>, 且构造函数前面需要加<code>Q_INVOKABLE</code>宏；</p></li><li><p>需要使用<code>qRegisterMetaType</code>函数注册类；</p></li><li><p>注意<code>QMetaObject::newInstance</code>函数传参时<code>Q_ARG</code>的用法。</p></li></ol><p>C++语言没有反射机制的，虽然借助Qt实现了但是实现起来并没有C#优雅、简单，从注意事项可以看出，用起来还是很麻烦的，期待后期通过反射+模板，更简单的实现。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式与Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单工厂模式与Qt类反射1</title>
    <link href="/noob/2021/05/18/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E7%B1%BB%E5%8F%8D%E5%B0%841/"/>
    <url>/noob/2021/05/18/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E7%B1%BB%E5%8F%8D%E5%B0%841/</url>
    
    <content type="html"><![CDATA[<blockquote><p>简单工厂模式介绍、实现、优缺点。</p></blockquote><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>平时代码中，经常见到如下的代码，更有甚者，连<code>LanguageShow()</code>函数都没有，直接在<code>main()</code>中写完所有的逻辑，有多少种情况就复制粘贴多少份。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LanguageType</span></span><br><span class="hljs-class">&#123;</span><br>C,<br>CPP,<br>Python<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LanguageBase</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//virtual void Do() = 0;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m C&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPPLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m CPP&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PythonLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m Python&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LanguageShow</span><span class="hljs-params">(LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br>LanguageBase* Language = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">switch</span> (type)<br>&#123;<br><span class="hljs-keyword">case</span> LanguageType::C:<br>Language = <span class="hljs-keyword">new</span> CLanguage();<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> LanguageType::CPP:<br>Language = <span class="hljs-keyword">new</span> CPPLanguage();<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> LanguageType::Python:<br>Language = <span class="hljs-keyword">new</span> PythonLanguage();<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br>Language = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>Language-&gt;Show();<br><span class="hljs-keyword">delete</span> Language;<br>Language = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>LanguageShow(LanguageType::C);<br>LanguageShow(LanguageType::CPP);<br>LanguageShow(LanguageType::Python);<br><br>    <span class="hljs-keyword">return</span> a.exec();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这种写法有几个问题：</p><ol><li> <code>LanguageShow()</code>函数违反了开闭原则 -  应该对于扩展是开放，对修改是关闭：假如增加新语言<code>JavaScript</code>，该函数免不了被修改;</li><li>责任不清， 函数应该只做一件事：<code>LanguageShow()</code>函数目前看来是做了两件事，一是根据条件产生 <code>LanguageBase</code>实例，二是<code>show()</code>；</li><li>封装不好：假如<code>LanguageBase</code>还能做其他事<code>Do()</code>, 当<code>LanguageBase</code>再做其他事<code>Do()</code>时，需要再封装一个<code>LanguageDo()</code>函数，并将<code>switch-case</code>那一段代码复制、粘贴到新函数中。</li></ol><h2 id="简单工厂的实现"><a href="#简单工厂的实现" class="headerlink" title="简单工厂的实现"></a>简单工厂的实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LanguageType</span></span><br><span class="hljs-class">&#123;</span><br>C,<br>CPP,<br>Python<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LanguageBase</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//virtual void Do() = 0;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m C&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPPLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m CPP&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PythonLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m Python&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">LanguageBase* <span class="hljs-title">CreateObject</span><span class="hljs-params">(LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (type)<br>&#123;<br><span class="hljs-keyword">case</span> LanguageType::C:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CLanguage();<br><br><span class="hljs-keyword">case</span> LanguageType::CPP:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CPPLanguage();<br><br><span class="hljs-keyword">case</span> LanguageType::Python:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PythonLanguage();<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LanguageShow</span><span class="hljs-params">(LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br>Factory factory;<br>LanguageBase *language = factory.CreateObject(type);<br><span class="hljs-keyword">if</span> (language != <span class="hljs-literal">nullptr</span>)<br>language-&gt;Show();<br><br><span class="hljs-keyword">delete</span> language;<br>language = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br><br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;LanguageType&gt; languages =<br>&#123;<br>LanguageType::C,<br>LanguageType::CPP,<br>LanguageType::Python,<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : languages)<br>&#123;<br>LanguageShow(it);<br>&#125;<br><br>    <span class="hljs-keyword">return</span> a.exec();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述写法将 <code>LanguageShow()</code>函数分成了两部分，一部分被封装到<code>Factory::CreateObject()</code>中。</p><ol><li><code>LanguageShow()</code>对修改关闭，无论再增加多少中语言，都不会再修改该函数；</li><li>再增加<code>LanguageDo()</code>函数也无需再复制粘贴代码，可共用<code>Factory::CreateObject()</code>函数，</li></ol><p>简单工厂其实不是一个设计模式，反而比较像是一种编程习惯（《Head First 设计模式》）。</p><h2 id="简单工厂的优点"><a href="#简单工厂的优点" class="headerlink" title="简单工厂的优点"></a>简单工厂的优点</h2><ol><li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。</li><li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</li></ol><h2 id="简单工厂的缺点"><a href="#简单工厂的缺点" class="headerlink" title="简单工厂的缺点"></a>简单工厂的缺点</h2><ol><li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</li><li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。</li><li><strong>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，同样破坏了“开闭原则”；在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</strong></li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构（<strong>本例没有使用静态工厂方法</strong>）。</li></ol><p>引自 <a href="https://www.jianshu.com/p/5cb52d84bd6d">工厂模式–简单工厂模式 - 简书 (jianshu.com)</a> </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jianshu.com/p/5cb52d84bd6d">简书</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>设计模式与Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt字符串转时间</title>
    <link href="/noob/2021/05/15/Qt%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%97%B6%E9%97%B4/"/>
    <url>/noob/2021/05/15/Qt%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Qt字符串转时间本地语言问题</p></blockquote><span id="more"></span><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近写了个解析git日志生成周报的“小”程序，需要解析git时间。</p><p>由于对git命令不太熟，决定采用<code>QDateTime :: fromString() </code>转时间，但是该函数返回了空值。</p><p>百度了半天也没找到答案，我想可能大家是没我这么粗心吧。。。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br>QString gitCmd = <span class="hljs-string">&quot;git log master&quot;</span>; <span class="hljs-comment">//过滤条件未写</span><br><span class="hljs-function">QProcess <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-keyword">this</span>)</span></span>;<br>p.start(<span class="hljs-string">&quot;cmd&quot;</span>, QStringList() &lt;&lt; <span class="hljs-string">&quot;/c&quot;</span> &lt;&lt; gitCmd);<br>p.waitForStarted();<br>p.waitForFinished();<br>QString result = p.readAllStandardOutput();<br><br></code></pre></td></tr></table></figure><p><code>result</code>中的时间格式为<code>Sun May 9 17:19:49 2021 +0800</code></p><p>只考虑<code>+0800</code>前面的部分<code>Sun May 9 17:19:49 2021</code></p><p>查阅Qt assistant,发现可以采用如下代码将其转为QDateTime</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">QString <span class="hljs-title">timeString</span><span class="hljs-params">(<span class="hljs-string">&quot;Sun May 9 17:19:49 2021&quot;</span>)</span></span>;<br>QDateTime time = QDateTime::fromString(timeString, <span class="hljs-string">&quot;ddd MMM d hh:mm:ss yyyy&quot;</span>);<br>qDebug() &lt;&lt; time.toString(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br></code></pre></td></tr></table></figure><p>发现qDebug()输出为空。</p><p>仔细查看Qt assistant, 发现QDateTime::fromString有如下的Note:</p><blockquote><p>Note: Unlike the other version of this function, day and month names must be given in the user’s local language. It is only possible to use the English names if the user’s language is English.</p></blockquote><p>原来是要使用本地语言才可以得到正确结果，所以需要形如<code>周日 5月 23 20:17:39 2021</code>的字符串才可以。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="使用QLocale-toDateTime"><a href="#使用QLocale-toDateTime" class="headerlink" title="使用QLocale::toDateTime()"></a>使用QLocale::toDateTime()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">QString <span class="hljs-title">timeString</span><span class="hljs-params">(<span class="hljs-string">&quot;Sun May 9 17:19:49 2021&quot;</span>)</span></span>;<br><span class="hljs-function">QLocale <span class="hljs-title">loc</span><span class="hljs-params">(QLocale::English)</span></span>;<br>QDateTime dateTime = loc.toDateTime(timeString, <span class="hljs-string">&quot;ddd MMM d hh:mm:ss yyyy&quot;</span>);<br>qDebug() &lt;&lt; dateTime.toString(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="使用git命令格式化时间字符串"><a href="#使用git命令格式化时间字符串" class="headerlink" title="使用git命令格式化时间字符串"></a>使用git命令格式化时间字符串</h2><p>由于对git命令不熟，git官网<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">Git - 查看提交历史 (git-scm.com)</a>也没有详细介绍如果格式化时间字符串， 而且加上时间格式化语句还出现了其他过滤条件不起作用的问题，所以开始时一心想着用代码去解决该问题，后来发现还是直接用命令格式化最简单：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">QString gitCmd = <span class="hljs-string">&quot;git log master&quot;</span>; <span class="hljs-comment">//过滤条件未写</span><br><span class="hljs-keyword">const</span> QString logDateFormat = <span class="hljs-string">&quot; --date=format:%Y-%m-%d-%H-%M-%S &quot;</span>;<br>gitCmd += logDateFormat;<br></code></pre></td></tr></table></figure><p>如果还有其他过滤条件，应该将其放到<code>logDateFormat</code>前，否则可能导致过滤条件不起作用的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Qt最好的资料还是 Qt assistant, 百度半天不如耐心看文档。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[stackoverflow](<a href="https://stackoverflow.com/questions/50149481/change-the-specified-string-to-qdatetime">qt - Change the specified string to QDateTime - Stack Overflow</a>)<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QDateTime</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QDateTime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qt自定义控件组合效果（按钮为例）</title>
    <link href="/noob/2021/04/24/qt%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E7%BB%84%E5%90%88%E6%95%88%E6%9E%9C%EF%BC%88%E6%8C%89%E9%92%AE%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <url>/noob/2021/04/24/qt%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E7%BB%84%E5%90%88%E6%95%88%E6%9E%9C%EF%BC%88%E6%8C%89%E9%92%AE%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Qt组合控件通过QSS实现统一效果</p></blockquote><span id="more"></span><h2 id="cpp布局代码如下"><a href="#cpp布局代码如下" class="headerlink" title="cpp布局代码如下"></a>cpp布局代码如下</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">textLabel = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QLabel(<span class="hljs-params">text</span>, <span class="hljs-params">this</span>)</span>;<br>textLabel-&gt;set<span class="hljs-constructor">ObjectName(<span class="hljs-string">&quot;textLabel&quot;</span>)</span>;<br>textLabel-&gt;set<span class="hljs-constructor">Alignment(Qt::AlignCenter)</span>;<br><br>imageLabel = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QLabel(<span class="hljs-params">this</span>)</span>;<br>imageLabel-&gt;set<span class="hljs-constructor">ObjectName(<span class="hljs-string">&quot;imageLabel&quot;</span>)</span>;<br><br>QHBoxLayout* hLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>hLayout-&gt;set<span class="hljs-constructor">Spacing(SPACING)</span>;<br>hLayout-&gt;set<span class="hljs-constructor">ContentsMargins(0, 0, 0, 0)</span>;<br><br>hLayout-&gt;add<span class="hljs-constructor">Widget(<span class="hljs-params">textLabel</span>, 0, Qt::AlignVCenter)</span>;<br>hLayout-&gt;add<span class="hljs-constructor">Widget(<span class="hljs-params">imageLabel</span>, 0, Qt::AlignVCenter)</span>;<br><br>this-&gt;set<span class="hljs-constructor">Layout(<span class="hljs-params">hLayout</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="cpp核心代码如下"><a href="#cpp核心代码如下" class="headerlink" title="cpp核心代码如下"></a>cpp核心代码如下</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">bool</span> Button::event(QEvent* e)<br>&#123;<br><span class="hljs-keyword">switch</span> (e-&gt;type())<br>&#123;<br><span class="hljs-keyword">case</span> QEvent::MouseButtonRelease:<br>setCheckedStage(isChecked());<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> QEvent::Enter:<br>textLabel-&gt;setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;hover&quot;</span>);<br>imageLabel-&gt;setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;hover&quot;</span>);<br>repolish(textLabel);<br>repolish(imageLabel);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> QEvent::Leave:<br>setCheckedStage(isChecked());<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> QPushButton::event(e);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl">void Button::repolish(QWidget* widget)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">widget</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">style</span>()-&gt;</span>unpolish(widget);<br><span class="hljs-function"><span class="hljs-title">widget</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">style</span>()-&gt;</span>polish(widget);<br>&#125;<br><br>void Button::setCheckedStage(bool isCheck)<br>&#123;<br><span class="hljs-keyword">if</span> (isCheck == <span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">textLabel</span>-&gt;</span>setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;checked&quot;</span>);<br><span class="hljs-function"><span class="hljs-title">imageLabel</span>-&gt;</span>setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;checked&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">textLabel</span>-&gt;</span>setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;normal&quot;</span>);<br><span class="hljs-function"><span class="hljs-title">imageLabel</span>-&gt;</span>setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;normal&quot;</span>);<br>&#125;<br>repolish(textLabel);<br>repolish(imageLabel);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">connect(<span class="hljs-name">this</span>, <span class="hljs-symbol">&amp;Button</span>:<span class="hljs-symbol">:toggled</span>, [=](<span class="hljs-name">bool</span> _isChecked) &#123;<br>setCheckedStage(<span class="hljs-name">isChecked</span>())<span class="hljs-comment">;</span><br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="QSS如下"><a href="#QSS如下" class="headerlink" title="QSS如下"></a>QSS如下</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.Button</span><br>&#123;<br>    <span class="hljs-attribute">background</span>: transparent;<br>&#125;<br><br><span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#textLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;hover&#x27;</span>]</span>, <span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#textLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;checked&#x27;</span>]</span>,<br> <span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#imageLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;hover&#x27;</span>]</span>, <span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#imageLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;checked&#x27;</span>]</span><br>&#123;<br>    <span class="hljs-attribute">background</span>:red;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br><br><span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#textLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;normal&#x27;</span>]</span>, <span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#imageLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;normal&#x27;</span>]</span><br>&#123;<br>    <span class="hljs-attribute">background</span>:blue;<br>&#125;<br><br><span class="hljs-selector-class">.Button</span><span class="hljs-selector-id">#Temperature</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#imageLabel</span><br>&#123;<br>    <span class="hljs-attribute">border-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;:/image/test.png&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>通过事件及<code>Button::toggled</code>信号控制自定义Property，并通过QWidget的style()重新加载其样式；</li><li>QSS中判断子控件的自定义Property值来设定相应样式；</li></ol>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>样式表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QSS背景图片</title>
    <link href="/noob/2021/01/27/QSS%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <url>/noob/2021/01/27/QSS%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>background-image 和 border-image的区别。</p></blockquote><span id="more"></span><h2 id="拉伸与重复"><a href="#拉伸与重复" class="headerlink" title="拉伸与重复"></a>拉伸与重复</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl">QFrame *frame = new QFrame;<br><span class="hljs-comment">//不会自动适应图片，background-image图片尺寸不变，</span><br><span class="hljs-comment">//会重复或空出一块区域，取决于 background-repeat属性的设置</span><br><span class="hljs-function"><span class="hljs-title">frame</span>-&gt;</span>setStyleSheet(<span class="hljs-string">&quot;background-image:url(:/image/test.jpg)&quot;</span>);<br><span class="hljs-comment">//图片可以自动居中显示，控件大小改变时会自动拉伸，但是设置边框属性无效</span><br><span class="hljs-function"><span class="hljs-title">frame</span>-&gt;</span>setStyleSheet(<span class="hljs-string">&quot;border-image:url(:/image/test.jpg)&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>border-image：<ul><li>图片可以自动居中显示；</li><li>控件大小改变时会自动拉伸；</li><li>但是设置边框属性无效；</li><li>当控件大小需要改变或图片需要拉伸时使用。</li></ul></li><li>background-iamge：<ul><li>图片不会自动居中显示；</li><li>可以设置其background-position:属性，使其居中显示，甚至可以利用该属性，灵活控制QPushButton中图标和文字的位置</li><li>可以设置边框（border）的属性。</li></ul></li><li>如果同时指定border-image和background-iamge，那么border-image在上</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/guorong520/article/details/100707577">博客园</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>样式表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QCustomplot背景色透明</title>
    <link href="/noob/2020/12/30/QCustomplot%E8%83%8C%E6%99%AF%E8%89%B2%E9%80%8F%E6%98%8E/"/>
    <url>/noob/2020/12/30/QCustomplot%E8%83%8C%E6%99%AF%E8%89%B2%E9%80%8F%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<blockquote><p>QCustomplot 设置背景色透明，会出现穿透父控件背景色的问题，找了好久才解决的问题，最终找到两个方法，记录一下。</p></blockquote><span id="more"></span><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">customplot</span>-&gt;</span>setBackground(Qt::transparent);<br><span class="hljs-function"><span class="hljs-title">customplot</span>-&gt;</span>setStyleSheet(<span class="hljs-string">&quot;background: transparent;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">customplot-&gt;setBackground(Qt::transparent);<br>customplot-&gt;-&gt;setAttribute(Qt::WA_OpaquePaintEvent, <span class="hljs-keyword">false</span>);<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/leocc325/p/13194495.html">博客园</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.qcustomplot.com/index.php/support/forum/2055">QCustomplot Support Forum</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QCustomplot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
