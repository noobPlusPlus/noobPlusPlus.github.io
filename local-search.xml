<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>观察者模式模式与Qt信号槽</title>
    <link href="/noob/2021/05/22/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E4%BF%A1%E5%8F%B7%E6%A7%BD/"/>
    <url>/noob/2021/05/22/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E4%BF%A1%E5%8F%B7%E6%A7%BD/</url>
    
    <content type="html"><![CDATA[<p>填坑中</p>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>反射</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式与信号中心</title>
    <link href="/noob/2021/05/18/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%A1%E5%8F%B7%E4%B8%AD%E5%BF%83/"/>
    <url>/noob/2021/05/18/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%BF%A1%E5%8F%B7%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<p>填坑中</p>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>其他</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单工厂模式与Qt类反射</title>
    <link href="/noob/2021/05/18/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E7%B1%BB%E5%8F%8D%E5%B0%84/"/>
    <url>/noob/2021/05/18/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8EQt%E7%B1%BB%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<blockquote><p>简单工厂模式及其反射实现。</p></blockquote><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>平时代码中，经常见到如下的代码，更有甚者，连<code>LanguageShow()</code>函数都没有，直接在<code>main()</code>中写完所有的逻辑，有多少种情况就复制粘贴多少份。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LanguageType</span></span><br><span class="hljs-class">&#123;</span><br>C,<br>CPP,<br>Python<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LanguageBase</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//virtual void Do() = 0;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m C&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPPLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m CPP&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PythonLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m Python&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LanguageShow</span><span class="hljs-params">(LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br>LanguageBase* Language = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">switch</span> (type)<br>&#123;<br><span class="hljs-keyword">case</span> LanguageType::C:<br>Language = <span class="hljs-keyword">new</span> CLanguage();<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> LanguageType::CPP:<br>Language = <span class="hljs-keyword">new</span> CPPLanguage();<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> LanguageType::Python:<br>Language = <span class="hljs-keyword">new</span> PythonLanguage();<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br>Language = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>Language-&gt;Show();<br><span class="hljs-keyword">delete</span> Language;<br>Language = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>LanguageShow(LanguageType::C);<br>LanguageShow(LanguageType::CPP);<br>LanguageShow(LanguageType::Python);<br><br>    <span class="hljs-keyword">return</span> a.exec();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这种写法有几个问题：</p><ol><li> <code>LanguageShow()</code>函数违反了开闭原则 -  应该对于扩展是开放，对修改是关闭：假如增加新语言<code>JavaScript</code>，该函数免不了被修改;</li><li>责任不清， 函数应该只做一件事：<code>LanguageShow()</code>函数目前看来是做了两件事，一是根据条件产生 <code>LanguageBase</code>实例，二是<code>show()</code>；</li><li>封装不好：假如<code>LanguageBase</code>还能做其他事<code>Do()</code>, 当<code>LanguageBase</code>再做其他事<code>Do()</code>时，需要再封装一个<code>LanguageDo()</code>函数，并将<code>switch-case</code>那一段代码复制、粘贴到新函数中。</li></ol><h2 id="简单工厂的实现"><a href="#简单工厂的实现" class="headerlink" title="简单工厂的实现"></a>简单工厂的实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QCoreApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LanguageType</span></span><br><span class="hljs-class">&#123;</span><br>C,<br>CPP,<br>Python<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LanguageBase</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//virtual void Do() = 0;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m C&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPPLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m CPP&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PythonLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m Python&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">LanguageBase* <span class="hljs-title">CreateObject</span><span class="hljs-params">(LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">switch</span> (type)<br>&#123;<br><span class="hljs-keyword">case</span> LanguageType::C:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CLanguage();<br><br><span class="hljs-keyword">case</span> LanguageType::CPP:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CPPLanguage();<br><br><span class="hljs-keyword">case</span> LanguageType::Python:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PythonLanguage();<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LanguageShow</span><span class="hljs-params">(LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br>Factory factory;<br>LanguageBase *language = factory.CreateObject(type);<br><span class="hljs-keyword">if</span> (language != <span class="hljs-literal">nullptr</span>)<br>language-&gt;Show();<br><br><span class="hljs-keyword">delete</span> language;<br>language = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QCoreApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br><br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;LanguageType&gt; languages =<br>&#123;<br>LanguageType::C,<br>LanguageType::CPP,<br>LanguageType::Python,<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : languages)<br>&#123;<br>LanguageShow(it);<br>&#125;<br><br>    <span class="hljs-keyword">return</span> a.exec();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述写法将 <code>LanguageShow()</code>函数分成了两部分，一部分被封装到<code>Factory::CreateObject()</code>中。</p><ol><li><code>LanguageShow()</code>对修改关闭，无论再增加多少中语言，都不会再修改该函数；</li><li>再增加<code>LanguageDo()</code>函数也无需再复制粘贴代码，可共用<code>Factory::CreateObject()</code>函数，</li></ol><p>简单工厂其实不是一个设计模式，反而比较像是一种编程习惯（《Head First 设计模式》）。</p><h2 id="简单工厂的优点"><a href="#简单工厂的优点" class="headerlink" title="简单工厂的优点"></a>简单工厂的优点</h2><ol><li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。</li><li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</li></ol><h2 id="简单工厂的缺点"><a href="#简单工厂的缺点" class="headerlink" title="简单工厂的缺点"></a>简单工厂的缺点</h2><ol><li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</li><li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。</li><li><strong>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，同样破坏了“开闭原则”；在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</strong></li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构（<strong>本例没有使用静态工厂方法</strong>）。</li></ol><p>引自 <a href="https://www.jianshu.com/p/5cb52d84bd6d">工厂模式–简单工厂模式 - 简书 (jianshu.com)</a> </p><p>如缺点3所言：<strong>这不就是<code>LanguageShow()</code>函数把违反开闭原则的锅甩给了<code>Factory::CreateObject()</code>函数吗？</strong></p><p>之前写过一段时间WPF，受WPF大佬NaBian的控件库 <a href="https://handyorg.github.io/handycontrol/">HandyControl | HandyOrg</a>   <a href="https://github.com/nabian/handycontrol">github.com</a> 启发，知道了C#语言可以通过反射机制实现简单工厂模式。</p><p>但是C++语言本身没有反射机制，只好借用Qt的反射来实现。</p><h2 id="反射实现简单工厂"><a href="#反射实现简单工厂" class="headerlink" title="反射实现简单工厂"></a>反射实现简单工厂</h2><p><code>language.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QObject&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QMetaEnum&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MetaEnums</span> :</span> <span class="hljs-keyword">public</span> QObject<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MetaEnums</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">QObject</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">LanguageType</span></span><br><span class="hljs-class">&#123;</span><br>C,<br>CPP,<br>Python<br>&#125;;<br><br>Q_ENUM(LanguageType)<br><br><span class="hljs-function">QString <span class="hljs-title">LanguageTypeToString</span><span class="hljs-params">(LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br>QMetaEnum metaEnum = QMetaEnum::fromType&lt;LanguageType&gt;();<br><span class="hljs-keyword">return</span> QString(metaEnum.valueToKey(type)) + <span class="hljs-string">&quot;Language&quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LanguageBase</span> :</span> <span class="hljs-keyword">public</span> QObject<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">LanguageBase</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">QObject</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Q_INVOKABLE <span class="hljs-keyword">explicit</span> <span class="hljs-title">CLanguage</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">LanguageBase</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m C&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPPLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Q_INVOKABLE <span class="hljs-keyword">explicit</span> <span class="hljs-title">CPPLanguage</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">LanguageBase</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m CPP&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PythonLanguage</span> :</span> <span class="hljs-keyword">public</span> LanguageBase<br>&#123;<br>Q_OBJECT<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">Q_INVOKABLE <span class="hljs-keyword">explicit</span> <span class="hljs-title">PythonLanguage</span><span class="hljs-params">(QObject *parent = <span class="hljs-literal">nullptr</span>)</span> : <span class="hljs-title">LanguageBase</span><span class="hljs-params">(parent)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;I&#x27;m Python&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cTypeId = qRegisterMetaType&lt;CLanguage*&gt;();<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cppTypeId = qRegisterMetaType&lt;CPPLanguage*&gt;();<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> pythonTypeId = qRegisterMetaType&lt;PythonLanguage*&gt;();<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">LanguageBase* <span class="hljs-title">CreateObject</span><span class="hljs-params">(MetaEnums::LanguageType type)</span></span><br><span class="hljs-function"></span>&#123;<br>MetaEnums metaEnums;<br><span class="hljs-keyword">auto</span> className = metaEnums.LanguageTypeToString(type) + <span class="hljs-string">&quot;*&quot;</span>;<br><br><span class="hljs-keyword">int</span> classTypeID = QMetaType::type(className.toLocal8Bit().data());<br><span class="hljs-keyword">const</span> QMetaObject *theMetaObject = QMetaType::metaObjectForType(classTypeID);<br><span class="hljs-keyword">if</span> (theMetaObject == <span class="hljs-literal">nullptr</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>QObject *obj = theMetaObject-&gt;newInstance(Q_ARG(QObject*, <span class="hljs-literal">nullptr</span>));<br>LanguageBase *languageBase = qobject_cast&lt;LanguageBase*&gt;(obj);<br><span class="hljs-keyword">return</span> languageBase;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其他函数同上。</p><p><code>Factory::CreateObject()</code>函数终于不用背违反开闭原则的锅了。</p><p>需要有几个注意事项，否则可能一直Create不出Object。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>需要有<code>LanguageTypeToString()</code>函数将枚举转换为字符串，而且枚举不能用c++11新特性<code>enum class</code>,只能用<code>enum</code>;</p><p>这里如果用<code>switch-case</code>或<code>if-else</code>得到类名，那还不如直接用普通的简单工厂方式；</p></li><li><p>类需要继承自<code>QObject</code>, 且构造函数前面需要加<code>Q_INVOKABLE</code>宏；</p></li><li><p>需要使用<code>qRegisterMetaType</code>函数注册类；</p></li><li><p>注意<code>QMetaObject::newInstance</code>函数传参时<code>Q_ARG</code>的用法。</p></li></ol><p>C++语言没有反射机制的，虽然借助Qt实现了但是实现起来并没有C#优雅、简单，从注意事项可以看出，用起来还是很麻烦的，期待后期通过反射+模板，更简单的实现。</p>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>反射</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码中的 if…else 杂谈</title>
    <link href="/noob/2021/05/16/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84-if%E2%80%A6else-%E6%9D%82%E8%B0%88/"/>
    <url>/noob/2021/05/16/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84-if%E2%80%A6else-%E6%9D%82%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<p>填坑中</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>编码规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt字符串转时间</title>
    <link href="/noob/2021/05/15/Qt%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%97%B6%E9%97%B4/"/>
    <url>/noob/2021/05/15/Qt%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Qt字符串转时间本地语言问题</p></blockquote><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近写了个解析git日志生成周报的“小”程序，需要解析git时间。</p><p>由于对git命令不太熟，决定采用<code>QDateTime :: fromString() </code>转时间，但是该函数返回了空值。</p><p>百度了半天也没找到答案，我想可能大家是没我这么粗心吧。。。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br>QString gitCmd = <span class="hljs-string">&quot;git log master&quot;</span>; <span class="hljs-comment">//过滤条件未写</span><br><span class="hljs-function">QProcess <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-keyword">this</span>)</span></span>;<br>p.start(<span class="hljs-string">&quot;cmd&quot;</span>, QStringList() &lt;&lt; <span class="hljs-string">&quot;/c&quot;</span> &lt;&lt; gitCmd);<br>p.waitForStarted();<br>p.waitForFinished();<br>QString result = p.readAllStandardOutput();<br><br></code></pre></td></tr></table></figure><p><code>result</code>中的时间格式为<code>Sun May 9 17:19:49 2021 +0800</code></p><p>只考虑<code>+0800</code>前面的部分<code>Sun May 9 17:19:49 2021</code></p><p>查阅Qt assistant,发现可以采用如下代码将其转为QDateTime</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">QString <span class="hljs-title">timeString</span><span class="hljs-params">(<span class="hljs-string">&quot;Sun May 9 17:19:49 2021&quot;</span>)</span></span>;<br>QDateTime time = QDateTime::fromString(timeString, <span class="hljs-string">&quot;ddd MMM d hh:mm:ss yyyy&quot;</span>);<br>qDebug() &lt;&lt; time.toString(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br></code></pre></td></tr></table></figure><p>发现qDebug()输出为空。</p><p>仔细查看Qt assistant, 发现QDateTime::fromString有如下的Note:</p><blockquote><p>Note: Unlike the other version of this function, day and month names must be given in the user’s local language. It is only possible to use the English names if the user’s language is English.</p></blockquote><p>原来是要使用本地语言才可以得到正确结果。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="使用QLocale-toDateTime"><a href="#使用QLocale-toDateTime" class="headerlink" title="使用QLocale::toDateTime()"></a>使用QLocale::toDateTime()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">QString <span class="hljs-title">timeString</span><span class="hljs-params">(<span class="hljs-string">&quot;Sun May 9 17:19:49 2021&quot;</span>)</span></span>;<br><span class="hljs-function">QLocale <span class="hljs-title">loc</span><span class="hljs-params">(QLocale::English)</span></span>;<br>QDateTime dateTime = loc.toDateTime(timeString, <span class="hljs-string">&quot;ddd MMM d hh:mm:ss yyyy&quot;</span>);<br>qDebug() &lt;&lt; dateTime.toString(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="使用git命令格式化时间字符串"><a href="#使用git命令格式化时间字符串" class="headerlink" title="使用git命令格式化时间字符串"></a>使用git命令格式化时间字符串</h2><p>由于对git命令不熟，git官网<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">Git - 查看提交历史 (git-scm.com)</a>也没有详细介绍如果格式化时间字符串， 而且加上时间格式化语句还出现了其他过滤条件不起作用的问题，所以开始时一心想着用代码去解决该问题，后来发现还是直接用命令格式化最简单：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">QString gitCmd = <span class="hljs-string">&quot;git log master&quot;</span>; <span class="hljs-comment">//过滤条件未写</span><br><span class="hljs-keyword">const</span> QString logDateFormat = <span class="hljs-string">&quot; --date=format:%Y-%m-%d-%H-%M-%S &quot;</span>;<br>gitCmd += logDateFormat;<br></code></pre></td></tr></table></figure><p>如果还有其他过滤条件，应该将其放到<code>logDateFormat</code>前，否则可能导致过滤条件不起作用的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Qt最好的资料还是 Qt assistant, 百度半天不如耐心看文档。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>[stackoverflow](<a href="https://stackoverflow.com/questions/50149481/change-the-specified-string-to-qdatetime">qt - Change the specified string to QDateTime - Stack Overflow</a>)<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QDateTime</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QDateTime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qt自定义控件组合效果（按钮为例）</title>
    <link href="/noob/2021/04/24/qt%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E7%BB%84%E5%90%88%E6%95%88%E6%9E%9C%EF%BC%88%E6%8C%89%E9%92%AE%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <url>/noob/2021/04/24/qt%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E7%BB%84%E5%90%88%E6%95%88%E6%9E%9C%EF%BC%88%E6%8C%89%E9%92%AE%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Qt组合控件通过QSS实现统一效果</p></blockquote><a id="more"></a><h2 id="cpp布局代码如下"><a href="#cpp布局代码如下" class="headerlink" title="cpp布局代码如下"></a>cpp布局代码如下</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">textLabel = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QLabel(<span class="hljs-params">text</span>, <span class="hljs-params">this</span>)</span>;<br>textLabel-&gt;set<span class="hljs-constructor">ObjectName(<span class="hljs-string">&quot;textLabel&quot;</span>)</span>;<br>textLabel-&gt;set<span class="hljs-constructor">Alignment(Qt::AlignCenter)</span>;<br><br>imageLabel = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QLabel(<span class="hljs-params">this</span>)</span>;<br>imageLabel-&gt;set<span class="hljs-constructor">ObjectName(<span class="hljs-string">&quot;imageLabel&quot;</span>)</span>;<br><br>QHBoxLayout* hLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>hLayout-&gt;set<span class="hljs-constructor">Spacing(SPACING)</span>;<br>hLayout-&gt;set<span class="hljs-constructor">ContentsMargins(0, 0, 0, 0)</span>;<br><br>hLayout-&gt;add<span class="hljs-constructor">Widget(<span class="hljs-params">textLabel</span>, 0, Qt::AlignVCenter)</span>;<br>hLayout-&gt;add<span class="hljs-constructor">Widget(<span class="hljs-params">imageLabel</span>, 0, Qt::AlignVCenter)</span>;<br><br>this-&gt;set<span class="hljs-constructor">Layout(<span class="hljs-params">hLayout</span>)</span>;<br></code></pre></td></tr></table></figure><h2 id="cpp核心代码如下"><a href="#cpp核心代码如下" class="headerlink" title="cpp核心代码如下"></a>cpp核心代码如下</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">bool</span> Button::event(QEvent* e)<br>&#123;<br><span class="hljs-keyword">switch</span> (e-&gt;type())<br>&#123;<br><span class="hljs-keyword">case</span> QEvent::MouseButtonRelease:<br>setCheckedStage(isChecked());<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> QEvent::Enter:<br>textLabel-&gt;setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;hover&quot;</span>);<br>imageLabel-&gt;setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;hover&quot;</span>);<br>repolish(textLabel);<br>repolish(imageLabel);<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> QEvent::Leave:<br>setCheckedStage(isChecked());<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> QPushButton::event(e);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl">void Button::repolish(QWidget* widget)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">widget</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">style</span>()-&gt;</span>unpolish(widget);<br><span class="hljs-function"><span class="hljs-title">widget</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">style</span>()-&gt;</span>polish(widget);<br>&#125;<br><br>void Button::setCheckedStage(bool isCheck)<br>&#123;<br><span class="hljs-keyword">if</span> (isCheck == <span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">textLabel</span>-&gt;</span>setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;checked&quot;</span>);<br><span class="hljs-function"><span class="hljs-title">imageLabel</span>-&gt;</span>setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;checked&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-function"><span class="hljs-title">textLabel</span>-&gt;</span>setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;normal&quot;</span>);<br><span class="hljs-function"><span class="hljs-title">imageLabel</span>-&gt;</span>setProperty(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;normal&quot;</span>);<br>&#125;<br>repolish(textLabel);<br>repolish(imageLabel);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">connect(<span class="hljs-name">this</span>, <span class="hljs-symbol">&amp;Button</span>:<span class="hljs-symbol">:toggled</span>, [=](<span class="hljs-name">bool</span> _isChecked) &#123;<br>setCheckedStage(<span class="hljs-name">isChecked</span>())<span class="hljs-comment">;</span><br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="QSS如下"><a href="#QSS如下" class="headerlink" title="QSS如下"></a>QSS如下</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.Button</span><br>&#123;<br>    <span class="hljs-attribute">background</span>: transparent;<br>&#125;<br><br><span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#textLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;hover&#x27;</span>]</span>, <span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#textLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;checked&#x27;</span>]</span>,<br> <span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#imageLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;hover&#x27;</span>]</span>, <span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#imageLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;checked&#x27;</span>]</span><br>&#123;<br>    <span class="hljs-attribute">background</span>:red;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br><br><span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#textLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;normal&#x27;</span>]</span>, <span class="hljs-selector-class">.Button</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#imageLabel</span><span class="hljs-selector-attr">[state = <span class="hljs-string">&#x27;normal&#x27;</span>]</span><br>&#123;<br>    <span class="hljs-attribute">background</span>:blue;<br>&#125;<br><br><span class="hljs-selector-class">.Button</span><span class="hljs-selector-id">#Temperature</span> <span class="hljs-selector-tag">QLabel</span><span class="hljs-selector-id">#imageLabel</span><br>&#123;<br>    <span class="hljs-attribute">border-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;:/image/test.png&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>通过事件及<code>Button::toggled</code>信号控制自定义Property，并通过QWidget的style()重新加载其样式；</li><li>QSS中判断子控件的自定义Property值来设定相应样式；</li></ol>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>样式表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QSS背景图片</title>
    <link href="/noob/2021/01/27/QSS%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <url>/noob/2021/01/27/QSS%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>background-image 和 border-image的区别。</p></blockquote><a id="more"></a><h2 id="拉伸与重复"><a href="#拉伸与重复" class="headerlink" title="拉伸与重复"></a>拉伸与重复</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl">QFrame *frame = new QFrame;<br><span class="hljs-comment">//不会自动适应图片，background-image图片尺寸不变，</span><br><span class="hljs-comment">//会重复或空出一块区域，取决于 background-repeat属性的设置</span><br><span class="hljs-function"><span class="hljs-title">frame</span>-&gt;</span>setStyleSheet(<span class="hljs-string">&quot;background-image:url(:/image/test.jpg)&quot;</span>);<br><span class="hljs-comment">//图片可以自动居中显示，控件大小改变时会自动拉伸，但是设置边框属性无效</span><br><span class="hljs-function"><span class="hljs-title">frame</span>-&gt;</span>setStyleSheet(<span class="hljs-string">&quot;border-image:url(:/image/test.jpg)&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>border-image：<ul><li>图片可以自动居中显示；</li><li>控件大小改变时会自动拉伸；</li><li>但是设置边框属性无效；</li><li>当控件大小需要改变或图片需要拉伸时使用。</li></ul></li><li>background-iamge：<ul><li>图片不会自动居中显示；</li><li>可以设置其background-position:属性，使其居中显示，甚至可以利用该属性，灵活控制QPushButton中图标和文字的位置</li><li>可以设置边框（border）的属性。</li></ul></li><li>如果同时指定border-image和background-iamge，那么border-image在上</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/guorong520/article/details/100707577">博客园</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>样式表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QCustomplot背景色透明</title>
    <link href="/noob/2020/12/30/QCustomplot%E8%83%8C%E6%99%AF%E8%89%B2%E9%80%8F%E6%98%8E/"/>
    <url>/noob/2020/12/30/QCustomplot%E8%83%8C%E6%99%AF%E8%89%B2%E9%80%8F%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<blockquote><p>QCustomplot 设置背景色透明，会出现穿透父控件背景色的问题，找了好久才解决的问题，最终找到两个方法，记录一下。</p></blockquote><a id="more"></a><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">customplot</span>-&gt;</span>setBackground(Qt::transparent);<br><span class="hljs-function"><span class="hljs-title">customplot</span>-&gt;</span>setStyleSheet(<span class="hljs-string">&quot;background: transparent;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">customplot-&gt;setBackground(Qt::transparent);<br>customplot-&gt;-&gt;setAttribute(Qt::WA_OpaquePaintEvent, <span class="hljs-keyword">false</span>);<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/leocc325/p/13194495.html">博客园</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.qcustomplot.com/index.php/support/forum/2055">QCustomplot Support Forum</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
      <category>QCustomplot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
